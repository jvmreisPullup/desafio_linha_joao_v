
desafio_linha_Tamandutech.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000688c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006a20  08006a20  00016a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a68  08006a68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006a68  08006a68  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a68  08006a68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a68  08006a68  00016a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a6c  08006a6c  00016a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  2000000c  08006a7c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08006a7c  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c489  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003489  00000000  00000000  0003c4c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001720  00000000  00000000  0003f950  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001548  00000000  00000000  00041070  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000265d9  00000000  00000000  000425b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001505b  00000000  00000000  00068b91  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ecae4  00000000  00000000  0007dbec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016a6d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006000  00000000  00000000  0016a74c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006a08 	.word	0x08006a08

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08006a08 	.word	0x08006a08

080001d4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80001da:	463b      	mov	r3, r7
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	609a      	str	r2, [r3, #8]
 80001e4:	60da      	str	r2, [r3, #12]
 80001e6:	611a      	str	r2, [r3, #16]
 80001e8:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001ea:	4b29      	ldr	r3, [pc, #164]	; (8000290 <MX_ADC1_Init+0xbc>)
 80001ec:	4a29      	ldr	r2, [pc, #164]	; (8000294 <MX_ADC1_Init+0xc0>)
 80001ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80001f0:	4b27      	ldr	r3, [pc, #156]	; (8000290 <MX_ADC1_Init+0xbc>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001f6:	4b26      	ldr	r3, [pc, #152]	; (8000290 <MX_ADC1_Init+0xbc>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001fc:	4b24      	ldr	r3, [pc, #144]	; (8000290 <MX_ADC1_Init+0xbc>)
 80001fe:	2200      	movs	r2, #0
 8000200:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000202:	4b23      	ldr	r3, [pc, #140]	; (8000290 <MX_ADC1_Init+0xbc>)
 8000204:	2200      	movs	r2, #0
 8000206:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000208:	4b21      	ldr	r3, [pc, #132]	; (8000290 <MX_ADC1_Init+0xbc>)
 800020a:	2204      	movs	r2, #4
 800020c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800020e:	4b20      	ldr	r3, [pc, #128]	; (8000290 <MX_ADC1_Init+0xbc>)
 8000210:	2200      	movs	r2, #0
 8000212:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000214:	4b1e      	ldr	r3, [pc, #120]	; (8000290 <MX_ADC1_Init+0xbc>)
 8000216:	2200      	movs	r2, #0
 8000218:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800021a:	4b1d      	ldr	r3, [pc, #116]	; (8000290 <MX_ADC1_Init+0xbc>)
 800021c:	2201      	movs	r2, #1
 800021e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000220:	4b1b      	ldr	r3, [pc, #108]	; (8000290 <MX_ADC1_Init+0xbc>)
 8000222:	2200      	movs	r2, #0
 8000224:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000228:	4b19      	ldr	r3, [pc, #100]	; (8000290 <MX_ADC1_Init+0xbc>)
 800022a:	2200      	movs	r2, #0
 800022c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800022e:	4b18      	ldr	r3, [pc, #96]	; (8000290 <MX_ADC1_Init+0xbc>)
 8000230:	2200      	movs	r2, #0
 8000232:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000234:	4b16      	ldr	r3, [pc, #88]	; (8000290 <MX_ADC1_Init+0xbc>)
 8000236:	2200      	movs	r2, #0
 8000238:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800023c:	4b14      	ldr	r3, [pc, #80]	; (8000290 <MX_ADC1_Init+0xbc>)
 800023e:	2200      	movs	r2, #0
 8000240:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000242:	4b13      	ldr	r3, [pc, #76]	; (8000290 <MX_ADC1_Init+0xbc>)
 8000244:	2200      	movs	r2, #0
 8000246:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800024a:	4811      	ldr	r0, [pc, #68]	; (8000290 <MX_ADC1_Init+0xbc>)
 800024c:	f001 f91e 	bl	800148c <HAL_ADC_Init>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000256:	f000 fadf 	bl	8000818 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800025a:	4b0f      	ldr	r3, [pc, #60]	; (8000298 <MX_ADC1_Init+0xc4>)
 800025c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800025e:	2306      	movs	r3, #6
 8000260:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000262:	2300      	movs	r3, #0
 8000264:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000266:	237f      	movs	r3, #127	; 0x7f
 8000268:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800026a:	2304      	movs	r3, #4
 800026c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000272:	463b      	mov	r3, r7
 8000274:	4619      	mov	r1, r3
 8000276:	4806      	ldr	r0, [pc, #24]	; (8000290 <MX_ADC1_Init+0xbc>)
 8000278:	f001 fd1c 	bl	8001cb4 <HAL_ADC_ConfigChannel>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000282:	f000 fac9 	bl	8000818 <Error_Handler>
  }

}
 8000286:	bf00      	nop
 8000288:	3718      	adds	r7, #24
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	20000028 	.word	0x20000028
 8000294:	50040000 	.word	0x50040000
 8000298:	04300002 	.word	0x04300002

0800029c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b08a      	sub	sp, #40	; 0x28
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a4:	f107 0314 	add.w	r3, r7, #20
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
 80002b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a19      	ldr	r2, [pc, #100]	; (8000320 <HAL_ADC_MspInit+0x84>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d12b      	bne.n	8000316 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80002be:	4b19      	ldr	r3, [pc, #100]	; (8000324 <HAL_ADC_MspInit+0x88>)
 80002c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c2:	4a18      	ldr	r2, [pc, #96]	; (8000324 <HAL_ADC_MspInit+0x88>)
 80002c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ca:	4b16      	ldr	r3, [pc, #88]	; (8000324 <HAL_ADC_MspInit+0x88>)
 80002cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002d2:	613b      	str	r3, [r7, #16]
 80002d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d6:	4b13      	ldr	r3, [pc, #76]	; (8000324 <HAL_ADC_MspInit+0x88>)
 80002d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002da:	4a12      	ldr	r2, [pc, #72]	; (8000324 <HAL_ADC_MspInit+0x88>)
 80002dc:	f043 0304 	orr.w	r3, r3, #4
 80002e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002e2:	4b10      	ldr	r3, [pc, #64]	; (8000324 <HAL_ADC_MspInit+0x88>)
 80002e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e6:	f003 0304 	and.w	r3, r3, #4
 80002ea:	60fb      	str	r3, [r7, #12]
 80002ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80002ee:	2301      	movs	r3, #1
 80002f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80002f2:	230b      	movs	r3, #11
 80002f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f6:	2300      	movs	r3, #0
 80002f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002fa:	f107 0314 	add.w	r3, r7, #20
 80002fe:	4619      	mov	r1, r3
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <HAL_ADC_MspInit+0x8c>)
 8000302:	f002 fabd 	bl	8002880 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000306:	2200      	movs	r2, #0
 8000308:	2100      	movs	r1, #0
 800030a:	2012      	movs	r0, #18
 800030c:	f002 fa33 	bl	8002776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000310:	2012      	movs	r0, #18
 8000312:	f002 fa4c 	bl	80027ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000316:	bf00      	nop
 8000318:	3728      	adds	r7, #40	; 0x28
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	50040000 	.word	0x50040000
 8000324:	40021000 	.word	0x40021000
 8000328:	48000800 	.word	0x48000800

0800032c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b08a      	sub	sp, #40	; 0x28
 8000330:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000332:	f107 0314 	add.w	r3, r7, #20
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
 8000340:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000342:	4b30      	ldr	r3, [pc, #192]	; (8000404 <MX_GPIO_Init+0xd8>)
 8000344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000346:	4a2f      	ldr	r2, [pc, #188]	; (8000404 <MX_GPIO_Init+0xd8>)
 8000348:	f043 0304 	orr.w	r3, r3, #4
 800034c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800034e:	4b2d      	ldr	r3, [pc, #180]	; (8000404 <MX_GPIO_Init+0xd8>)
 8000350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000352:	f003 0304 	and.w	r3, r3, #4
 8000356:	613b      	str	r3, [r7, #16]
 8000358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800035a:	4b2a      	ldr	r3, [pc, #168]	; (8000404 <MX_GPIO_Init+0xd8>)
 800035c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035e:	4a29      	ldr	r2, [pc, #164]	; (8000404 <MX_GPIO_Init+0xd8>)
 8000360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000366:	4b27      	ldr	r3, [pc, #156]	; (8000404 <MX_GPIO_Init+0xd8>)
 8000368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800036e:	60fb      	str	r3, [r7, #12]
 8000370:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000372:	4b24      	ldr	r3, [pc, #144]	; (8000404 <MX_GPIO_Init+0xd8>)
 8000374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000376:	4a23      	ldr	r2, [pc, #140]	; (8000404 <MX_GPIO_Init+0xd8>)
 8000378:	f043 0301 	orr.w	r3, r3, #1
 800037c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800037e:	4b21      	ldr	r3, [pc, #132]	; (8000404 <MX_GPIO_Init+0xd8>)
 8000380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000382:	f003 0301 	and.w	r3, r3, #1
 8000386:	60bb      	str	r3, [r7, #8]
 8000388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800038a:	4b1e      	ldr	r3, [pc, #120]	; (8000404 <MX_GPIO_Init+0xd8>)
 800038c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038e:	4a1d      	ldr	r2, [pc, #116]	; (8000404 <MX_GPIO_Init+0xd8>)
 8000390:	f043 0302 	orr.w	r3, r3, #2
 8000394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000396:	4b1b      	ldr	r3, [pc, #108]	; (8000404 <MX_GPIO_Init+0xd8>)
 8000398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800039a:	f003 0302 	and.w	r3, r3, #2
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_1_GPIO_Port, led_1_Pin, GPIO_PIN_RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003a8:	4817      	ldr	r0, [pc, #92]	; (8000408 <MX_GPIO_Init+0xdc>)
 80003aa:	f002 fbe3 	bl	8002b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led_1_Pin;
 80003ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b4:	2301      	movs	r3, #1
 80003b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b8:	2300      	movs	r3, #0
 80003ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003bc:	2300      	movs	r3, #0
 80003be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_1_GPIO_Port, &GPIO_InitStruct);
 80003c0:	f107 0314 	add.w	r3, r7, #20
 80003c4:	4619      	mov	r1, r3
 80003c6:	4810      	ldr	r0, [pc, #64]	; (8000408 <MX_GPIO_Init+0xdc>)
 80003c8:	f002 fa5a 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = button_1_Pin;
 80003cc:	2340      	movs	r3, #64	; 0x40
 80003ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003d0:	2300      	movs	r3, #0
 80003d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d4:	2300      	movs	r3, #0
 80003d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_1_GPIO_Port, &GPIO_InitStruct);
 80003d8:	f107 0314 	add.w	r3, r7, #20
 80003dc:	4619      	mov	r1, r3
 80003de:	480b      	ldr	r0, [pc, #44]	; (800040c <MX_GPIO_Init+0xe0>)
 80003e0:	f002 fa4e 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = sensor_optico_Pin;
 80003e4:	2380      	movs	r3, #128	; 0x80
 80003e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003e8:	2303      	movs	r3, #3
 80003ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ec:	2300      	movs	r3, #0
 80003ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(sensor_optico_GPIO_Port, &GPIO_InitStruct);
 80003f0:	f107 0314 	add.w	r3, r7, #20
 80003f4:	4619      	mov	r1, r3
 80003f6:	4805      	ldr	r0, [pc, #20]	; (800040c <MX_GPIO_Init+0xe0>)
 80003f8:	f002 fa42 	bl	8002880 <HAL_GPIO_Init>

}
 80003fc:	bf00      	nop
 80003fe:	3728      	adds	r7, #40	; 0x28
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40021000 	.word	0x40021000
 8000408:	48000400 	.word	0x48000400
 800040c:	48000800 	.word	0x48000800

08000410 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <MX_I2C1_Init+0x74>)
 8000416:	4a1c      	ldr	r2, [pc, #112]	; (8000488 <MX_I2C1_Init+0x78>)
 8000418:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800041a:	4b1a      	ldr	r3, [pc, #104]	; (8000484 <MX_I2C1_Init+0x74>)
 800041c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000420:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000422:	4b18      	ldr	r3, [pc, #96]	; (8000484 <MX_I2C1_Init+0x74>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000428:	4b16      	ldr	r3, [pc, #88]	; (8000484 <MX_I2C1_Init+0x74>)
 800042a:	2201      	movs	r2, #1
 800042c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800042e:	4b15      	ldr	r3, [pc, #84]	; (8000484 <MX_I2C1_Init+0x74>)
 8000430:	2200      	movs	r2, #0
 8000432:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000434:	4b13      	ldr	r3, [pc, #76]	; (8000484 <MX_I2C1_Init+0x74>)
 8000436:	2200      	movs	r2, #0
 8000438:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800043a:	4b12      	ldr	r3, [pc, #72]	; (8000484 <MX_I2C1_Init+0x74>)
 800043c:	2200      	movs	r2, #0
 800043e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000440:	4b10      	ldr	r3, [pc, #64]	; (8000484 <MX_I2C1_Init+0x74>)
 8000442:	2200      	movs	r2, #0
 8000444:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000446:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <MX_I2C1_Init+0x74>)
 8000448:	2200      	movs	r2, #0
 800044a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800044c:	480d      	ldr	r0, [pc, #52]	; (8000484 <MX_I2C1_Init+0x74>)
 800044e:	f002 fba9 	bl	8002ba4 <HAL_I2C_Init>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000458:	f000 f9de 	bl	8000818 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800045c:	2100      	movs	r1, #0
 800045e:	4809      	ldr	r0, [pc, #36]	; (8000484 <MX_I2C1_Init+0x74>)
 8000460:	f003 f9c7 	bl	80037f2 <HAL_I2CEx_ConfigAnalogFilter>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800046a:	f000 f9d5 	bl	8000818 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800046e:	2100      	movs	r1, #0
 8000470:	4804      	ldr	r0, [pc, #16]	; (8000484 <MX_I2C1_Init+0x74>)
 8000472:	f003 fa09 	bl	8003888 <HAL_I2CEx_ConfigDigitalFilter>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800047c:	f000 f9cc 	bl	8000818 <Error_Handler>
  }

}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20000090 	.word	0x20000090
 8000488:	40005400 	.word	0x40005400

0800048c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b08a      	sub	sp, #40	; 0x28
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000494:	f107 0314 	add.w	r3, r7, #20
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	605a      	str	r2, [r3, #4]
 800049e:	609a      	str	r2, [r3, #8]
 80004a0:	60da      	str	r2, [r3, #12]
 80004a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a20      	ldr	r2, [pc, #128]	; (800052c <HAL_I2C_MspInit+0xa0>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d139      	bne.n	8000522 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ae:	4b20      	ldr	r3, [pc, #128]	; (8000530 <HAL_I2C_MspInit+0xa4>)
 80004b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b2:	4a1f      	ldr	r2, [pc, #124]	; (8000530 <HAL_I2C_MspInit+0xa4>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ba:	4b1d      	ldr	r3, [pc, #116]	; (8000530 <HAL_I2C_MspInit+0xa4>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	613b      	str	r3, [r7, #16]
 80004c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80004c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80004ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004cc:	2312      	movs	r3, #18
 80004ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004d0:	2301      	movs	r3, #1
 80004d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004d4:	2303      	movs	r3, #3
 80004d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80004d8:	2304      	movs	r3, #4
 80004da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004dc:	f107 0314 	add.w	r3, r7, #20
 80004e0:	4619      	mov	r1, r3
 80004e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e6:	f002 f9cb 	bl	8002880 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004ea:	4b11      	ldr	r3, [pc, #68]	; (8000530 <HAL_I2C_MspInit+0xa4>)
 80004ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ee:	4a10      	ldr	r2, [pc, #64]	; (8000530 <HAL_I2C_MspInit+0xa4>)
 80004f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004f4:	6593      	str	r3, [r2, #88]	; 0x58
 80004f6:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <HAL_I2C_MspInit+0xa4>)
 80004f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	2100      	movs	r1, #0
 8000506:	201f      	movs	r0, #31
 8000508:	f002 f935 	bl	8002776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800050c:	201f      	movs	r0, #31
 800050e:	f002 f94e 	bl	80027ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000512:	2200      	movs	r2, #0
 8000514:	2100      	movs	r1, #0
 8000516:	2020      	movs	r0, #32
 8000518:	f002 f92d 	bl	8002776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800051c:	2020      	movs	r0, #32
 800051e:	f002 f946 	bl	80027ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000522:	bf00      	nop
 8000524:	3728      	adds	r7, #40	; 0x28
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40005400 	.word	0x40005400
 8000530:	40021000 	.word	0x40021000

08000534 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0

  hlptim1.Instance = LPTIM1;
 8000538:	4b16      	ldr	r3, [pc, #88]	; (8000594 <MX_LPTIM1_Init+0x60>)
 800053a:	4a17      	ldr	r2, [pc, #92]	; (8000598 <MX_LPTIM1_Init+0x64>)
 800053c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <MX_LPTIM1_Init+0x60>)
 8000540:	2200      	movs	r2, #0
 8000542:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000544:	4b13      	ldr	r3, [pc, #76]	; (8000594 <MX_LPTIM1_Init+0x60>)
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 800054a:	4b12      	ldr	r3, [pc, #72]	; (8000594 <MX_LPTIM1_Init+0x60>)
 800054c:	2200      	movs	r2, #0
 800054e:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8000550:	4b10      	ldr	r3, [pc, #64]	; (8000594 <MX_LPTIM1_Init+0x60>)
 8000552:	2200      	movs	r2, #0
 8000554:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000556:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <MX_LPTIM1_Init+0x60>)
 8000558:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800055c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800055e:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <MX_LPTIM1_Init+0x60>)
 8000560:	2200      	movs	r2, #0
 8000562:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000564:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <MX_LPTIM1_Init+0x60>)
 8000566:	2200      	movs	r2, #0
 8000568:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 800056a:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <MX_LPTIM1_Init+0x60>)
 800056c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000570:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <MX_LPTIM1_Init+0x60>)
 8000574:	2200      	movs	r2, #0
 8000576:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <MX_LPTIM1_Init+0x60>)
 800057a:	2200      	movs	r2, #0
 800057c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <MX_LPTIM1_Init+0x60>)
 8000580:	f003 f9ce 	bl	8003920 <HAL_LPTIM_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 800058a:	f000 f945 	bl	8000818 <Error_Handler>
  }

}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	200000dc 	.word	0x200000dc
 8000598:	40007c00 	.word	0x40007c00

0800059c <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	; 0x28
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]
  if(lptimHandle->Instance==LPTIM1)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a29      	ldr	r2, [pc, #164]	; (8000660 <HAL_LPTIM_MspInit+0xc4>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d14b      	bne.n	8000656 <HAL_LPTIM_MspInit+0xba>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80005be:	4b29      	ldr	r3, [pc, #164]	; (8000664 <HAL_LPTIM_MspInit+0xc8>)
 80005c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005c2:	4a28      	ldr	r2, [pc, #160]	; (8000664 <HAL_LPTIM_MspInit+0xc8>)
 80005c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005c8:	6593      	str	r3, [r2, #88]	; 0x58
 80005ca:	4b26      	ldr	r3, [pc, #152]	; (8000664 <HAL_LPTIM_MspInit+0xc8>)
 80005cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d6:	4b23      	ldr	r3, [pc, #140]	; (8000664 <HAL_LPTIM_MspInit+0xc8>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	4a22      	ldr	r2, [pc, #136]	; (8000664 <HAL_LPTIM_MspInit+0xc8>)
 80005dc:	f043 0304 	orr.w	r3, r3, #4
 80005e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e2:	4b20      	ldr	r3, [pc, #128]	; (8000664 <HAL_LPTIM_MspInit+0xc8>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	f003 0304 	and.w	r3, r3, #4
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <HAL_LPTIM_MspInit+0xc8>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f2:	4a1c      	ldr	r2, [pc, #112]	; (8000664 <HAL_LPTIM_MspInit+0xc8>)
 80005f4:	f043 0302 	orr.w	r3, r3, #2
 80005f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <HAL_LPTIM_MspInit+0xc8>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	f003 0302 	and.w	r3, r3, #2
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration
    PC2     ------> LPTIM1_IN2
    PB5     ------> LPTIM1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000606:	2304      	movs	r3, #4
 8000608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060a:	2302      	movs	r3, #2
 800060c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	2300      	movs	r3, #0
 8000614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8000616:	2301      	movs	r3, #1
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	4811      	ldr	r0, [pc, #68]	; (8000668 <HAL_LPTIM_MspInit+0xcc>)
 8000622:	f002 f92d 	bl	8002880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000626:	2320      	movs	r3, #32
 8000628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062a:	2302      	movs	r3, #2
 800062c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	2300      	movs	r3, #0
 8000634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8000636:	2301      	movs	r3, #1
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	480a      	ldr	r0, [pc, #40]	; (800066c <HAL_LPTIM_MspInit+0xd0>)
 8000642:	f002 f91d 	bl	8002880 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	2100      	movs	r1, #0
 800064a:	2041      	movs	r0, #65	; 0x41
 800064c:	f002 f893 	bl	8002776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8000650:	2041      	movs	r0, #65	; 0x41
 8000652:	f002 f8ac 	bl	80027ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8000656:	bf00      	nop
 8000658:	3728      	adds	r7, #40	; 0x28
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40007c00 	.word	0x40007c00
 8000664:	40021000 	.word	0x40021000
 8000668:	48000800 	.word	0x48000800
 800066c:	48000400 	.word	0x48000400

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b098      	sub	sp, #96	; 0x60
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000676:	f000 fca6 	bl	8000fc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067a:	f000 f841 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f7ff fe55 	bl	800032c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000682:	f7ff fec5 	bl	8000410 <MX_I2C1_Init>
  MX_RTC_Init();
 8000686:	f000 f8cf 	bl	8000828 <MX_RTC_Init>
  MX_TIM1_Init();
 800068a:	f000 f9ff 	bl	8000a8c <MX_TIM1_Init>
  MX_LPTIM1_Init();
 800068e:	f7ff ff51 	bl	8000534 <MX_LPTIM1_Init>
  MX_ADC1_Init();
 8000692:	f7ff fd9f 	bl	80001d4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  PID_config PID_config_default = PID_DEFAULT_CONFIG;
 8000696:	4a19      	ldr	r2, [pc, #100]	; (80006fc <main+0x8c>)
 8000698:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800069c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006a0:	e883 0003 	stmia.w	r3, {r0, r1}
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  get_sensor_optico(&valor_atual);
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 fc40 	bl	8000f2c <get_sensor_optico>

	  vTaskCalcularPID(PID_config_default, &valor_atual);
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	461a      	mov	r2, r3
 80006b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006b8:	f000 fb5e 	bl	8000d78 <vTaskCalcularPID>

	  switch(maquina_estado)
 80006bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d007      	beq.n	80006d4 <main+0x64>
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	d009      	beq.n	80006dc <main+0x6c>
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d115      	bne.n	80006f8 <main+0x88>
	  {
	  case PARADO :

		  stopt_motor(100);
 80006cc:	2064      	movs	r0, #100	; 0x64
 80006ce:	f000 fc1d 	bl	8000f0c <stopt_motor>

		  break;
 80006d2:	e011      	b.n	80006f8 <main+0x88>
	  case RETA :

		  start_motor_1_2(100);
 80006d4:	2064      	movs	r0, #100	; 0x64
 80006d6:	f000 fbc5 	bl	8000e64 <start_motor_1_2>
		  break;
 80006da:	e00d      	b.n	80006f8 <main+0x88>

	  case CURVA :

		  if(valor_atual._marca_laterais.quantidade_e){
 80006dc:	7ebb      	ldrb	r3, [r7, #26]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d003      	beq.n	80006ea <main+0x7a>
			  start_motor_1(50);
 80006e2:	2032      	movs	r0, #50	; 0x32
 80006e4:	f000 fb60 	bl	8000da8 <start_motor_1>
		  }else if(valor_atual._marca_laterais.quantidade_d){
			  start_motor_2(50);
		  	  }
		  break;
 80006e8:	e005      	b.n	80006f6 <main+0x86>
		  }else if(valor_atual._marca_laterais.quantidade_d){
 80006ea:	7efb      	ldrb	r3, [r7, #27]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d002      	beq.n	80006f6 <main+0x86>
			  start_motor_2(50);
 80006f0:	2032      	movs	r0, #50	; 0x32
 80006f2:	f000 fb87 	bl	8000e04 <start_motor_2>
		  break;
 80006f6:	bf00      	nop
  {
 80006f8:	e7d4      	b.n	80006a4 <main+0x34>
 80006fa:	bf00      	nop
 80006fc:	08006a20 	.word	0x08006a20

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b0b0      	sub	sp, #192	; 0xc0
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800070a:	2244      	movs	r2, #68	; 0x44
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f006 f972 	bl	80069f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000724:	463b      	mov	r3, r7
 8000726:	2268      	movs	r2, #104	; 0x68
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f006 f964 	bl	80069f8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000730:	f003 fa6c 	bl	8003c0c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000734:	4b36      	ldr	r3, [pc, #216]	; (8000810 <SystemClock_Config+0x110>)
 8000736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800073a:	4a35      	ldr	r2, [pc, #212]	; (8000810 <SystemClock_Config+0x110>)
 800073c:	f023 0318 	bic.w	r3, r3, #24
 8000740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000744:	231c      	movs	r3, #28
 8000746:	67fb      	str	r3, [r7, #124]	; 0x7c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000748:	2301      	movs	r3, #1
 800074a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800074e:	2301      	movs	r3, #1
 8000750:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000754:	2301      	movs	r3, #1
 8000756:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000760:	2360      	movs	r3, #96	; 0x60
 8000762:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000766:	2300      	movs	r3, #0
 8000768:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000770:	4618      	mov	r0, r3
 8000772:	f003 fabf 	bl	8003cf4 <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800077c:	f000 f84c 	bl	8000818 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000780:	230f      	movs	r3, #15
 8000782:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000784:	2300      	movs	r3, #0
 8000786:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000794:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f003 feca 	bl	8004534 <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007a6:	f000 f837 	bl	8000818 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPTIM1
 80007aa:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <SystemClock_Config+0x114>)
 80007ac:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80007b2:	2300      	movs	r3, #0
 80007b4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80007b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80007ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80007bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007c0:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80007c2:	2301      	movs	r3, #1
 80007c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80007c6:	2301      	movs	r3, #1
 80007c8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80007ca:	2308      	movs	r3, #8
 80007cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80007ce:	2307      	movs	r3, #7
 80007d0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80007da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007de:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	4618      	mov	r0, r3
 80007e4:	f004 f872 	bl	80048cc <HAL_RCCEx_PeriphCLKConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80007ee:	f000 f813 	bl	8000818 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007f6:	f003 fa27 	bl	8003c48 <HAL_PWREx_ControlVoltageScaling>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8000800:	f000 f80a 	bl	8000818 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000804:	f004 facc 	bl	8004da0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000808:	bf00      	nop
 800080a:	37c0      	adds	r7, #192	; 0xc0
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40021000 	.word	0x40021000
 8000814:	00024240 	.word	0x00024240

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
	...

08000828 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800083c:	2300      	movs	r3, #0
 800083e:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000840:	4b25      	ldr	r3, [pc, #148]	; (80008d8 <MX_RTC_Init+0xb0>)
 8000842:	4a26      	ldr	r2, [pc, #152]	; (80008dc <MX_RTC_Init+0xb4>)
 8000844:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000846:	4b24      	ldr	r3, [pc, #144]	; (80008d8 <MX_RTC_Init+0xb0>)
 8000848:	2200      	movs	r2, #0
 800084a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800084c:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <MX_RTC_Init+0xb0>)
 800084e:	227f      	movs	r2, #127	; 0x7f
 8000850:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000852:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <MX_RTC_Init+0xb0>)
 8000854:	22ff      	movs	r2, #255	; 0xff
 8000856:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000858:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <MX_RTC_Init+0xb0>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800085e:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <MX_RTC_Init+0xb0>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000864:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <MX_RTC_Init+0xb0>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800086a:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <MX_RTC_Init+0xb0>)
 800086c:	2200      	movs	r2, #0
 800086e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000870:	4819      	ldr	r0, [pc, #100]	; (80008d8 <MX_RTC_Init+0xb0>)
 8000872:	f004 fb95 	bl	8004fa0 <HAL_RTC_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800087c:	f7ff ffcc 	bl	8000818 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000880:	2300      	movs	r3, #0
 8000882:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000884:	2300      	movs	r3, #0
 8000886:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000888:	2300      	movs	r3, #0
 800088a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2201      	movs	r2, #1
 8000898:	4619      	mov	r1, r3
 800089a:	480f      	ldr	r0, [pc, #60]	; (80008d8 <MX_RTC_Init+0xb0>)
 800089c:	f004 fbfb 	bl	8005096 <HAL_RTC_SetTime>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80008a6:	f7ff ffb7 	bl	8000818 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008aa:	2301      	movs	r3, #1
 80008ac:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80008ae:	2301      	movs	r3, #1
 80008b0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008ba:	463b      	mov	r3, r7
 80008bc:	2201      	movs	r2, #1
 80008be:	4619      	mov	r1, r3
 80008c0:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_RTC_Init+0xb0>)
 80008c2:	f004 fc85 	bl	80051d0 <HAL_RTC_SetDate>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80008cc:	f7ff ffa4 	bl	8000818 <Error_Handler>
  }

}
 80008d0:	bf00      	nop
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000114 	.word	0x20000114
 80008dc:	40002800 	.word	0x40002800

080008e0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a08      	ldr	r2, [pc, #32]	; (8000910 <HAL_RTC_MspInit+0x30>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d107      	bne.n	8000902 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <HAL_RTC_MspInit+0x34>)
 80008f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008f8:	4a06      	ldr	r2, [pc, #24]	; (8000914 <HAL_RTC_MspInit+0x34>)
 80008fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40002800 	.word	0x40002800
 8000914:	40021000 	.word	0x40021000

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <HAL_MspInit+0x44>)
 8000920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000922:	4a0e      	ldr	r2, [pc, #56]	; (800095c <HAL_MspInit+0x44>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6613      	str	r3, [r2, #96]	; 0x60
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <HAL_MspInit+0x44>)
 800092c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_MspInit+0x44>)
 8000938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <HAL_MspInit+0x44>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000940:	6593      	str	r3, [r2, #88]	; 0x58
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_MspInit+0x44>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <HardFault_Handler+0x4>

08000974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <MemManage_Handler+0x4>

0800097a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <BusFault_Handler+0x4>

08000980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <UsageFault_Handler+0x4>

08000986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b4:	f000 fb5c 	bl	8001070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}

080009bc <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80009c0:	4802      	ldr	r0, [pc, #8]	; (80009cc <ADC1_IRQHandler+0x10>)
 80009c2:	f000 ffa5 	bl	8001910 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000028 	.word	0x20000028

080009d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <TIM3_IRQHandler+0x10>)
 80009d6:	f004 ff55 	bl	8005884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000138 	.word	0x20000138

080009e4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <I2C1_EV_IRQHandler+0x10>)
 80009ea:	f002 f96a 	bl	8002cc2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000090 	.word	0x20000090

080009f8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <I2C1_ER_IRQHandler+0x10>)
 80009fe:	f002 f97a 	bl	8002cf6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000090 	.word	0x20000090

08000a0c <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <LPTIM1_IRQHandler+0x10>)
 8000a12:	f003 f819 	bl	8003a48 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200000dc 	.word	0x200000dc

08000a20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <SystemInit+0x64>)
 8000a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2a:	4a16      	ldr	r2, [pc, #88]	; (8000a84 <SystemInit+0x64>)
 8000a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <SystemInit+0x68>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a13      	ldr	r2, [pc, #76]	; (8000a88 <SystemInit+0x68>)
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <SystemInit+0x68>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <SystemInit+0x68>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a0f      	ldr	r2, [pc, #60]	; (8000a88 <SystemInit+0x68>)
 8000a4c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a50:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <SystemInit+0x68>)
 8000a58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a5c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <SystemInit+0x68>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a09      	ldr	r2, [pc, #36]	; (8000a88 <SystemInit+0x68>)
 8000a64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <SystemInit+0x68>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a70:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <SystemInit+0x64>)
 8000a72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a76:	609a      	str	r2, [r3, #8]
#endif
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00
 8000a88:	40021000 	.word	0x40021000

08000a8c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b09e      	sub	sp, #120	; 0x78
 8000a90:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000aa0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000abc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
 8000acc:	615a      	str	r2, [r3, #20]
 8000ace:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	222c      	movs	r2, #44	; 0x2c
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f005 ff8e 	bl	80069f8 <memset>

  htim1.Instance = TIM1;
 8000adc:	4b4b      	ldr	r3, [pc, #300]	; (8000c0c <MX_TIM1_Init+0x180>)
 8000ade:	4a4c      	ldr	r2, [pc, #304]	; (8000c10 <MX_TIM1_Init+0x184>)
 8000ae0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ae2:	4b4a      	ldr	r3, [pc, #296]	; (8000c0c <MX_TIM1_Init+0x180>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b48      	ldr	r3, [pc, #288]	; (8000c0c <MX_TIM1_Init+0x180>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000aee:	4b47      	ldr	r3, [pc, #284]	; (8000c0c <MX_TIM1_Init+0x180>)
 8000af0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000af4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af6:	4b45      	ldr	r3, [pc, #276]	; (8000c0c <MX_TIM1_Init+0x180>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000afc:	4b43      	ldr	r3, [pc, #268]	; (8000c0c <MX_TIM1_Init+0x180>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b02:	4b42      	ldr	r3, [pc, #264]	; (8000c0c <MX_TIM1_Init+0x180>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b08:	4840      	ldr	r0, [pc, #256]	; (8000c0c <MX_TIM1_Init+0x180>)
 8000b0a:	f004 fc9f 	bl	800544c <HAL_TIM_Base_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000b14:	f7ff fe80 	bl	8000818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b1e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000b22:	4619      	mov	r1, r3
 8000b24:	4839      	ldr	r0, [pc, #228]	; (8000c0c <MX_TIM1_Init+0x180>)
 8000b26:	f005 f8dd 	bl	8005ce4 <HAL_TIM_ConfigClockSource>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b30:	f7ff fe72 	bl	8000818 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b34:	4835      	ldr	r0, [pc, #212]	; (8000c0c <MX_TIM1_Init+0x180>)
 8000b36:	f004 fce0 	bl	80054fa <HAL_TIM_PWM_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000b40:	f7ff fe6a 	bl	8000818 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000b48:	2310      	movs	r3, #16
 8000b4a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000b4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b50:	4619      	mov	r1, r3
 8000b52:	482e      	ldr	r0, [pc, #184]	; (8000c0c <MX_TIM1_Init+0x180>)
 8000b54:	f005 f97f 	bl	8005e56 <HAL_TIM_SlaveConfigSynchro>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000b5e:	f7ff fe5b 	bl	8000818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b62:	2300      	movs	r3, #0
 8000b64:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b66:	2300      	movs	r3, #0
 8000b68:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b72:	4619      	mov	r1, r3
 8000b74:	4825      	ldr	r0, [pc, #148]	; (8000c0c <MX_TIM1_Init+0x180>)
 8000b76:	f005 fe17 	bl	80067a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000b80:	f7ff fe4a 	bl	8000818 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b84:	2360      	movs	r3, #96	; 0x60
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b90:	2300      	movs	r3, #0
 8000b92:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4818      	ldr	r0, [pc, #96]	; (8000c0c <MX_TIM1_Init+0x180>)
 8000baa:	f004 ff8b 	bl	8005ac4 <HAL_TIM_PWM_ConfigChannel>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000bb4:	f7ff fe30 	bl	8000818 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bde:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000be8:	463b      	mov	r3, r7
 8000bea:	4619      	mov	r1, r3
 8000bec:	4807      	ldr	r0, [pc, #28]	; (8000c0c <MX_TIM1_Init+0x180>)
 8000bee:	f005 fe49 	bl	8006884 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8000bf8:	f7ff fe0e 	bl	8000818 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000bfc:	4803      	ldr	r0, [pc, #12]	; (8000c0c <MX_TIM1_Init+0x180>)
 8000bfe:	f000 f861 	bl	8000cc4 <HAL_TIM_MspPostInit>

}
 8000c02:	bf00      	nop
 8000c04:	3778      	adds	r7, #120	; 0x78
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000184 	.word	0x20000184
 8000c10:	40012c00 	.word	0x40012c00

08000c14 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a16      	ldr	r2, [pc, #88]	; (8000c7c <HAL_TIM_Base_MspInit+0x68>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d10c      	bne.n	8000c40 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c26:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <HAL_TIM_Base_MspInit+0x6c>)
 8000c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c2a:	4a15      	ldr	r2, [pc, #84]	; (8000c80 <HAL_TIM_Base_MspInit+0x6c>)
 8000c2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c30:	6613      	str	r3, [r2, #96]	; 0x60
 8000c32:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <HAL_TIM_Base_MspInit+0x6c>)
 8000c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000c3e:	e018      	b.n	8000c72 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <HAL_TIM_Base_MspInit+0x70>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d113      	bne.n	8000c72 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <HAL_TIM_Base_MspInit+0x6c>)
 8000c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4e:	4a0c      	ldr	r2, [pc, #48]	; (8000c80 <HAL_TIM_Base_MspInit+0x6c>)
 8000c50:	f043 0302 	orr.w	r3, r3, #2
 8000c54:	6593      	str	r3, [r2, #88]	; 0x58
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <HAL_TIM_Base_MspInit+0x6c>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	201d      	movs	r0, #29
 8000c68:	f001 fd85 	bl	8002776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c6c:	201d      	movs	r0, #29
 8000c6e:	f001 fd9e 	bl	80027ae <HAL_NVIC_EnableIRQ>
}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40012c00 	.word	0x40012c00
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40000400 	.word	0x40000400

08000c88 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c98:	d10b      	bne.n	8000cb2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <HAL_TIM_PWM_MspInit+0x38>)
 8000c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9e:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <HAL_TIM_PWM_MspInit+0x38>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_TIM_PWM_MspInit+0x38>)
 8000ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a23      	ldr	r2, [pc, #140]	; (8000d70 <HAL_TIM_MspPostInit+0xac>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d11d      	bne.n	8000d22 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	4b23      	ldr	r3, [pc, #140]	; (8000d74 <HAL_TIM_MspPostInit+0xb0>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	4a22      	ldr	r2, [pc, #136]	; (8000d74 <HAL_TIM_MspPostInit+0xb0>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf2:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <HAL_TIM_MspPostInit+0xb0>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cfe:	2380      	movs	r3, #128	; 0x80
 8000d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1c:	f001 fdb0 	bl	8002880 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d20:	e021      	b.n	8000d66 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM2)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d2a:	d11c      	bne.n	8000d66 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <HAL_TIM_MspPostInit+0xb0>)
 8000d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d30:	4a10      	ldr	r2, [pc, #64]	; (8000d74 <HAL_TIM_MspPostInit+0xb0>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d38:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <HAL_TIM_MspPostInit+0xb0>)
 8000d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d44:	2301      	movs	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d54:	2301      	movs	r3, #1
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d62:	f001 fd8d 	bl	8002880 <HAL_GPIO_Init>
}
 8000d66:	bf00      	nop
 8000d68:	3728      	adds	r7, #40	; 0x28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40012c00 	.word	0x40012c00
 8000d74:	40021000 	.word	0x40021000

08000d78 <vTaskCalcularPID>:
 */
#include "PID.h"
//#include "valores.h"


	int  vTaskCalcularPID(PID_config *PID_config_default, valores * valor_atual){
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]


		valor_atual->_PID_val._input._curvaPid	=	PID_config_default->_curvaPid;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	3306      	adds	r3, #6
 8000d88:	6812      	ldr	r2, [r2, #0]
 8000d8a:	601a      	str	r2, [r3, #0]
		valor_atual->_PID_val._input._retaPid	=	PID_config_default->_retaPid;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	330a      	adds	r3, #10
 8000d92:	3204      	adds	r2, #4
 8000d94:	6812      	ldr	r2, [r2, #0]
 8000d96:	601a      	str	r2, [r3, #0]


	  }
 8000d98:	bf00      	nop
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <start_motor_1>:
#define PWM_RES		3200


/* FUNCTIONS */
/* Starts the piezo with the desired frequency. Max frequency = 10kHz */
void start_motor_1(uint16_t freq){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000db2:	2100      	movs	r1, #0
 8000db4:	4811      	ldr	r0, [pc, #68]	; (8000dfc <start_motor_1+0x54>)
 8000db6:	f004 fcdd 	bl	8005774 <HAL_TIM_PWM_Stop>

	uint16_t ps = (CLOCK_FREQ/(freq * PWM_RES)) - 1;
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000dc0:	fb02 f303 	mul.w	r3, r2, r3
 8000dc4:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <start_motor_1+0x58>)
 8000dc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	81fb      	strh	r3, [r7, #14]
	if((ps < 1) || (ps > 65535)) ps = 1;
 8000dd0:	89fb      	ldrh	r3, [r7, #14]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d101      	bne.n	8000dda <start_motor_1+0x32>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	81fb      	strh	r3, [r7, #14]

	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, (PWM_RES/2)-1);
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <start_motor_1+0x54>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f240 623f 	movw	r2, #1599	; 0x63f
 8000de2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_PRESCALER(&htim1, ps);
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <start_motor_1+0x54>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	89fa      	ldrh	r2, [r7, #14]
 8000dea:	629a      	str	r2, [r3, #40]	; 0x28

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000dec:	2100      	movs	r1, #0
 8000dee:	4803      	ldr	r0, [pc, #12]	; (8000dfc <start_motor_1+0x54>)
 8000df0:	f004 fbda 	bl	80055a8 <HAL_TIM_PWM_Start>
}
 8000df4:	bf00      	nop
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000184 	.word	0x20000184
 8000e00:	01e84800 	.word	0x01e84800

08000e04 <start_motor_2>:

void start_motor_2(uint16_t freq){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4811      	ldr	r0, [pc, #68]	; (8000e58 <start_motor_2+0x54>)
 8000e12:	f004 fcaf 	bl	8005774 <HAL_TIM_PWM_Stop>

	uint16_t ps = (CLOCK_FREQ/(freq * PWM_RES)) - 1;
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000e1c:	fb02 f303 	mul.w	r3, r2, r3
 8000e20:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <start_motor_2+0x58>)
 8000e22:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	81fb      	strh	r3, [r7, #14]
	if((ps < 1) || (ps > 65535)) ps = 1;
 8000e2c:	89fb      	ldrh	r3, [r7, #14]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d101      	bne.n	8000e36 <start_motor_2+0x32>
 8000e32:	2301      	movs	r3, #1
 8000e34:	81fb      	strh	r3, [r7, #14]

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, (PWM_RES/2)-1);
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <start_motor_2+0x54>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f240 623f 	movw	r2, #1599	; 0x63f
 8000e3e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_PRESCALER(&htim2, ps);
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <start_motor_2+0x54>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	89fa      	ldrh	r2, [r7, #14]
 8000e46:	629a      	str	r2, [r3, #40]	; 0x28

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <start_motor_2+0x5c>)
 8000e4c:	f004 fbac 	bl	80055a8 <HAL_TIM_PWM_Start>
}
 8000e50:	bf00      	nop
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200001d0 	.word	0x200001d0
 8000e5c:	01e84800 	.word	0x01e84800
 8000e60:	20000184 	.word	0x20000184

08000e64 <start_motor_1_2>:



/* FUNCTIONS */
/* Starts the piezo with the desired frequency. Max frequency = 10kHz */
void start_motor_1_2(uint16_t freq1,uint16_t freq2){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	460a      	mov	r2, r1
 8000e6e:	80fb      	strh	r3, [r7, #6]
 8000e70:	4613      	mov	r3, r2
 8000e72:	80bb      	strh	r3, [r7, #4]
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000e74:	2100      	movs	r1, #0
 8000e76:	4822      	ldr	r0, [pc, #136]	; (8000f00 <start_motor_1_2+0x9c>)
 8000e78:	f004 fc7c 	bl	8005774 <HAL_TIM_PWM_Stop>

	uint16_t ps = (CLOCK_FREQ/(freq1 * PWM_RES)) - 1;
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000e82:	fb02 f303 	mul.w	r3, r2, r3
 8000e86:	4a1f      	ldr	r2, [pc, #124]	; (8000f04 <start_motor_1_2+0xa0>)
 8000e88:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	81fb      	strh	r3, [r7, #14]
	if((ps < 1) || (ps > 65535)) ps = 1;
 8000e92:	89fb      	ldrh	r3, [r7, #14]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d101      	bne.n	8000e9c <start_motor_1_2+0x38>
 8000e98:	2301      	movs	r3, #1
 8000e9a:	81fb      	strh	r3, [r7, #14]

	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, (PWM_RES/2)-1);
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <start_motor_1_2+0x9c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f240 623f 	movw	r2, #1599	; 0x63f
 8000ea4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_PRESCALER(&htim1, ps);
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <start_motor_1_2+0x9c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	89fa      	ldrh	r2, [r7, #14]
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4813      	ldr	r0, [pc, #76]	; (8000f00 <start_motor_1_2+0x9c>)
 8000eb2:	f004 fb79 	bl	80055a8 <HAL_TIM_PWM_Start>



	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4813      	ldr	r0, [pc, #76]	; (8000f08 <start_motor_1_2+0xa4>)
 8000eba:	f004 fc5b 	bl	8005774 <HAL_TIM_PWM_Stop>

	 ps = (CLOCK_FREQ/(freq2 * PWM_RES)) - 1;
 8000ebe:	88bb      	ldrh	r3, [r7, #4]
 8000ec0:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000ec4:	fb02 f303 	mul.w	r3, r2, r3
 8000ec8:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <start_motor_1_2+0xa0>)
 8000eca:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	81fb      	strh	r3, [r7, #14]
	if((ps < 1) || (ps > 65535)) ps = 1;
 8000ed4:	89fb      	ldrh	r3, [r7, #14]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <start_motor_1_2+0x7a>
 8000eda:	2301      	movs	r3, #1
 8000edc:	81fb      	strh	r3, [r7, #14]

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, (PWM_RES/2)-1);
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <start_motor_1_2+0xa4>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f240 623f 	movw	r2, #1599	; 0x63f
 8000ee6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_PRESCALER(&htim2, ps);
 8000ee8:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <start_motor_1_2+0xa4>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	89fa      	ldrh	r2, [r7, #14]
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4803      	ldr	r0, [pc, #12]	; (8000f00 <start_motor_1_2+0x9c>)
 8000ef4:	f004 fb58 	bl	80055a8 <HAL_TIM_PWM_Start>
}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000184 	.word	0x20000184
 8000f04:	01e84800 	.word	0x01e84800
 8000f08:	200001d0 	.word	0x200001d0

08000f0c <stopt_motor>:

/* Stops the piezo */
void stopt_motor(void){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000f10:	2100      	movs	r1, #0
 8000f12:	4804      	ldr	r0, [pc, #16]	; (8000f24 <stopt_motor+0x18>)
 8000f14:	f004 fc2e 	bl	8005774 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4803      	ldr	r0, [pc, #12]	; (8000f28 <stopt_motor+0x1c>)
 8000f1c:	f004 fc2a 	bl	8005774 <HAL_TIM_PWM_Stop>
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000184 	.word	0x20000184
 8000f28:	200001d0 	.word	0x200001d0

08000f2c <get_sensor_optico>:

#define HAL_MAXDELAY 200

ADC_HandleTypeDef hadc1;

int get_sensor_optico (valores valor_atual){
 8000f2c:	b084      	sub	sp, #16
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	f107 0c08 	add.w	ip, r7, #8
 8000f36:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	 HAL_ADC_Start(&hadc1);
 8000f3a:	480d      	ldr	r0, [pc, #52]	; (8000f70 <get_sensor_optico+0x44>)
 8000f3c:	f000 fbf0 	bl	8001720 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,HAL_MAXDELAY);
 8000f40:	21c8      	movs	r1, #200	; 0xc8
 8000f42:	480b      	ldr	r0, [pc, #44]	; (8000f70 <get_sensor_optico+0x44>)
 8000f44:	f000 fc4f 	bl	80017e6 <HAL_ADC_PollForConversion>
	  valor_atual._sensor_lateral_val.l_sensor_optico_d= HAL_ADC_GetValue(&hadc1);
 8000f48:	4809      	ldr	r0, [pc, #36]	; (8000f70 <get_sensor_optico+0x44>)
 8000f4a:	f000 fcd4 	bl	80018f6 <HAL_ADC_GetValue>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	84fb      	strh	r3, [r7, #38]	; 0x26
	  valor_atual._sensor_lateral_val.l_sensor_optico_e = HAL_ADC_GetValue(&hadc1);
 8000f54:	4806      	ldr	r0, [pc, #24]	; (8000f70 <get_sensor_optico+0x44>)
 8000f56:	f000 fcce 	bl	80018f6 <HAL_ADC_GetValue>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	84bb      	strh	r3, [r7, #36]	; 0x24

}
 8000f60:	bf00      	nop
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f6a:	b004      	add	sp, #16
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000028 	.word	0x20000028

08000f74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f78:	f7ff fd52 	bl	8000a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f7e:	e003      	b.n	8000f88 <LoopCopyDataInit>

08000f80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f86:	3104      	adds	r1, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f88:	480a      	ldr	r0, [pc, #40]	; (8000fb4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f90:	d3f6      	bcc.n	8000f80 <CopyDataInit>
	ldr	r2, =_sbss
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f94:	e002      	b.n	8000f9c <LoopFillZerobss>

08000f96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f98:	f842 3b04 	str.w	r3, [r2], #4

08000f9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <LoopForever+0x16>)
	cmp	r2, r3
 8000f9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fa0:	d3f9      	bcc.n	8000f96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa2:	f005 fd05 	bl	80069b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fa6:	f7ff fb63 	bl	8000670 <main>

08000faa <LoopForever>:

LoopForever:
    b LoopForever
 8000faa:	e7fe      	b.n	8000faa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fac:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8000fb0:	08006a70 	.word	0x08006a70
	ldr	r0, =_sdata
 8000fb4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000fb8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000fbc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000fc0:	20000220 	.word	0x20000220

08000fc4 <AES_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fc4:	e7fe      	b.n	8000fc4 <AES_IRQHandler>

08000fc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f001 fbc5 	bl	8002760 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f000 f80e 	bl	8000ff8 <HAL_InitTick>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d002      	beq.n	8000fe8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	71fb      	strb	r3, [r7, #7]
 8000fe6:	e001      	b.n	8000fec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fe8:	f7ff fc96 	bl	8000918 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fec:	79fb      	ldrb	r3, [r7, #7]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <HAL_InitTick+0x6c>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d023      	beq.n	8001054 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800100c:	4b16      	ldr	r3, [pc, #88]	; (8001068 <HAL_InitTick+0x70>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <HAL_InitTick+0x6c>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101a:	fbb3 f3f1 	udiv	r3, r3, r1
 800101e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f001 fbd1 	bl	80027ca <HAL_SYSTICK_Config>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d10f      	bne.n	800104e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b0f      	cmp	r3, #15
 8001032:	d809      	bhi.n	8001048 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001034:	2200      	movs	r2, #0
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f001 fb9b 	bl	8002776 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001040:	4a0a      	ldr	r2, [pc, #40]	; (800106c <HAL_InitTick+0x74>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	e007      	b.n	8001058 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	73fb      	strb	r3, [r7, #15]
 800104c:	e004      	b.n	8001058 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	73fb      	strb	r3, [r7, #15]
 8001052:	e001      	b.n	8001058 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008
 8001068:	20000000 	.word	0x20000000
 800106c:	20000004 	.word	0x20000004

08001070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_IncTick+0x20>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_IncTick+0x24>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <HAL_IncTick+0x24>)
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000008 	.word	0x20000008
 8001094:	2000021c 	.word	0x2000021c

08001098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <HAL_GetTick+0x14>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	2000021c 	.word	0x2000021c

080010b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	431a      	orrs	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	609a      	str	r2, [r3, #8]
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	431a      	orrs	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	609a      	str	r2, [r3, #8]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800110c:	4618      	mov	r0, r3
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001118:	b480      	push	{r7}
 800111a:	b087      	sub	sp, #28
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3360      	adds	r3, #96	; 0x60
 800112a:	461a      	mov	r2, r3
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <LL_ADC_SetOffset+0x44>)
 800113a:	4013      	ands	r3, r2
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	430a      	orrs	r2, r1
 8001146:	4313      	orrs	r3, r2
 8001148:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001150:	bf00      	nop
 8001152:	371c      	adds	r7, #28
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	03fff000 	.word	0x03fff000

08001160 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3360      	adds	r3, #96	; 0x60
 800116e:	461a      	mov	r2, r3
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001180:	4618      	mov	r0, r3
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800118c:	b480      	push	{r7}
 800118e:	b087      	sub	sp, #28
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	3360      	adds	r3, #96	; 0x60
 800119c:	461a      	mov	r2, r3
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	431a      	orrs	r2, r3
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011b6:	bf00      	nop
 80011b8:	371c      	adds	r7, #28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	431a      	orrs	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	615a      	str	r2, [r3, #20]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d101      	bne.n	8001200 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80011fc:	2301      	movs	r3, #1
 80011fe:	e000      	b.n	8001202 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800120e:	b480      	push	{r7}
 8001210:	b087      	sub	sp, #28
 8001212:	af00      	add	r7, sp, #0
 8001214:	60f8      	str	r0, [r7, #12]
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	3330      	adds	r3, #48	; 0x30
 800121e:	461a      	mov	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	0a1b      	lsrs	r3, r3, #8
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	4413      	add	r3, r2
 800122c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	f003 031f 	and.w	r3, r3, #31
 8001238:	211f      	movs	r1, #31
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	401a      	ands	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	0e9b      	lsrs	r3, r3, #26
 8001246:	f003 011f 	and.w	r1, r3, #31
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	f003 031f 	and.w	r3, r3, #31
 8001250:	fa01 f303 	lsl.w	r3, r1, r3
 8001254:	431a      	orrs	r2, r3
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800125a:	bf00      	nop
 800125c:	371c      	adds	r7, #28
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	3314      	adds	r3, #20
 800129c:	461a      	mov	r2, r3
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	0e5b      	lsrs	r3, r3, #25
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	4413      	add	r3, r2
 80012aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	0d1b      	lsrs	r3, r3, #20
 80012b4:	f003 031f 	and.w	r3, r3, #31
 80012b8:	2107      	movs	r1, #7
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	401a      	ands	r2, r3
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	0d1b      	lsrs	r3, r3, #20
 80012c6:	f003 031f 	and.w	r3, r3, #31
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	fa01 f303 	lsl.w	r3, r1, r3
 80012d0:	431a      	orrs	r2, r3
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80012d6:	bf00      	nop
 80012d8:	371c      	adds	r7, #28
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012fc:	43db      	mvns	r3, r3
 80012fe:	401a      	ands	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f003 0318 	and.w	r3, r3, #24
 8001306:	4908      	ldr	r1, [pc, #32]	; (8001328 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001308:	40d9      	lsrs	r1, r3
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	400b      	ands	r3, r1
 800130e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001312:	431a      	orrs	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800131a:	bf00      	nop
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	0007ffff 	.word	0x0007ffff

0800132c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800133c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6093      	str	r3, [r2, #8]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001364:	d101      	bne.n	800136a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001366:	2301      	movs	r3, #1
 8001368:	e000      	b.n	800136c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001388:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800138c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80013b4:	d101      	bne.n	80013ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80013b6:	2301      	movs	r3, #1
 80013b8:	e000      	b.n	80013bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013dc:	f043 0201 	orr.w	r2, r3, #1
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b01      	cmp	r3, #1
 8001402:	d101      	bne.n	8001408 <LL_ADC_IsEnabled+0x18>
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <LL_ADC_IsEnabled+0x1a>
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001426:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800142a:	f043 0204 	orr.w	r2, r3, #4
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	2b04      	cmp	r3, #4
 8001450:	d101      	bne.n	8001456 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	2b08      	cmp	r3, #8
 8001476:	d101      	bne.n	800147c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001478:	2301      	movs	r3, #1
 800147a:	e000      	b.n	800147e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001494:	2300      	movs	r3, #0
 8001496:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e12d      	b.n	8001702 <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d109      	bne.n	80014c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7fe fef1 	bl	800029c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff3f 	bl	8001350 <LL_ADC_IsDeepPowerDownEnabled>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d004      	beq.n	80014e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff25 	bl	800132c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff ff5a 	bl	80013a0 <LL_ADC_IsInternalRegulatorEnabled>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d113      	bne.n	800151a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff ff3e 	bl	8001378 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80014fc:	4b83      	ldr	r3, [pc, #524]	; (800170c <HAL_ADC_Init+0x280>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	099b      	lsrs	r3, r3, #6
 8001502:	4a83      	ldr	r2, [pc, #524]	; (8001710 <HAL_ADC_Init+0x284>)
 8001504:	fba2 2303 	umull	r2, r3, r2, r3
 8001508:	099b      	lsrs	r3, r3, #6
 800150a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800150c:	e002      	b.n	8001514 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	3b01      	subs	r3, #1
 8001512:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f9      	bne.n	800150e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff ff3e 	bl	80013a0 <LL_ADC_IsInternalRegulatorEnabled>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10d      	bne.n	8001546 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152e:	f043 0210 	orr.w	r2, r3, #16
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153a:	f043 0201 	orr.w	r2, r3, #1
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff ff77 	bl	800143e <LL_ADC_REG_IsConversionOngoing>
 8001550:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	2b00      	cmp	r3, #0
 800155c:	f040 80c8 	bne.w	80016f0 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	2b00      	cmp	r3, #0
 8001564:	f040 80c4 	bne.w	80016f0 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001570:	f043 0202 	orr.w	r2, r3, #2
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff37 	bl	80013f0 <LL_ADC_IsEnabled>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d10b      	bne.n	80015a0 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001588:	4862      	ldr	r0, [pc, #392]	; (8001714 <HAL_ADC_Init+0x288>)
 800158a:	f7ff ff31 	bl	80013f0 <LL_ADC_IsEnabled>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d105      	bne.n	80015a0 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	4619      	mov	r1, r3
 800159a:	485f      	ldr	r0, [pc, #380]	; (8001718 <HAL_ADC_Init+0x28c>)
 800159c:	f7ff fd88 	bl	80010b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	7e5b      	ldrb	r3, [r3, #25]
 80015a4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015aa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80015b0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80015b6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015be:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d106      	bne.n	80015dc <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d2:	3b01      	subs	r3, #1
 80015d4:	045b      	lsls	r3, r3, #17
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d009      	beq.n	80015f8 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	4b47      	ldr	r3, [pc, #284]	; (800171c <HAL_ADC_Init+0x290>)
 8001600:	4013      	ands	r3, r2
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6812      	ldr	r2, [r2, #0]
 8001606:	69b9      	ldr	r1, [r7, #24]
 8001608:	430b      	orrs	r3, r1
 800160a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff14 	bl	800143e <LL_ADC_REG_IsConversionOngoing>
 8001616:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff21 	bl	8001464 <LL_ADC_INJ_IsConversionOngoing>
 8001622:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d140      	bne.n	80016ac <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d13d      	bne.n	80016ac <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	7e1b      	ldrb	r3, [r3, #24]
 8001638:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800163a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001642:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001652:	f023 0306 	bic.w	r3, r3, #6
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	69b9      	ldr	r1, [r7, #24]
 800165c:	430b      	orrs	r3, r1
 800165e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001666:	2b01      	cmp	r3, #1
 8001668:	d118      	bne.n	800169c <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001674:	f023 0304 	bic.w	r3, r3, #4
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001680:	4311      	orrs	r1, r2
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001686:	4311      	orrs	r1, r2
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800168c:	430a      	orrs	r2, r1
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f042 0201 	orr.w	r2, r2, #1
 8001698:	611a      	str	r2, [r3, #16]
 800169a:	e007      	b.n	80016ac <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	691a      	ldr	r2, [r3, #16]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0201 	bic.w	r2, r2, #1
 80016aa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d10c      	bne.n	80016ce <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f023 010f 	bic.w	r1, r3, #15
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	1e5a      	subs	r2, r3, #1
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	631a      	str	r2, [r3, #48]	; 0x30
 80016cc:	e007      	b.n	80016de <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 020f 	bic.w	r2, r2, #15
 80016dc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e2:	f023 0303 	bic.w	r3, r3, #3
 80016e6:	f043 0201 	orr.w	r2, r3, #1
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	659a      	str	r2, [r3, #88]	; 0x58
 80016ee:	e007      	b.n	8001700 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f4:	f043 0210 	orr.w	r2, r3, #16
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001700:	7ffb      	ldrb	r3, [r7, #31]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3720      	adds	r7, #32
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000000 	.word	0x20000000
 8001710:	053e2d63 	.word	0x053e2d63
 8001714:	50040000 	.word	0x50040000
 8001718:	50040300 	.word	0x50040300
 800171c:	fff0c007 	.word	0xfff0c007

08001720 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fe86 	bl	800143e <LL_ADC_REG_IsConversionOngoing>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d14f      	bne.n	80017d8 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800173e:	2b01      	cmp	r3, #1
 8001740:	d101      	bne.n	8001746 <HAL_ADC_Start+0x26>
 8001742:	2302      	movs	r3, #2
 8001744:	e04b      	b.n	80017de <HAL_ADC_Start+0xbe>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 feaa 	bl	80024a8 <ADC_Enable>
 8001754:	4603      	mov	r3, r0
 8001756:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d137      	bne.n	80017ce <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001762:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001766:	f023 0301 	bic.w	r3, r3, #1
 800176a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001776:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800177a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800177e:	d106      	bne.n	800178e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001784:	f023 0206 	bic.w	r2, r3, #6
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	65da      	str	r2, [r3, #92]	; 0x5c
 800178c:	e002      	b.n	8001794 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	221c      	movs	r2, #28
 800179a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d007      	beq.n	80017c2 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fe25 	bl	8001416 <LL_ADC_REG_StartConversion>
 80017cc:	e006      	b.n	80017dc <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80017d6:	e001      	b.n	80017dc <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017d8:	2302      	movs	r3, #2
 80017da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b086      	sub	sp, #24
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d102      	bne.n	80017fe <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80017f8:	2308      	movs	r3, #8
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	e010      	b.n	8001820 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	2b00      	cmp	r3, #0
 800180a:	d007      	beq.n	800181c <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001810:	f043 0220 	orr.w	r2, r3, #32
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e068      	b.n	80018ee <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800181c:	2304      	movs	r3, #4
 800181e:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001820:	f7ff fc3a 	bl	8001098 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001826:	e01a      	b.n	800185e <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800182e:	d016      	beq.n	800185e <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001830:	f7ff fc32 	bl	8001098 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d302      	bcc.n	8001846 <HAL_ADC_PollForConversion+0x60>
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10b      	bne.n	800185e <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184a:	f043 0204 	orr.w	r2, r3, #4
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e047      	b.n	80018ee <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	4013      	ands	r3, r2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0dd      	beq.n	8001828 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001870:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fcb3 	bl	80011e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d01c      	beq.n	80018c2 <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	7e5b      	ldrb	r3, [r3, #25]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d118      	bne.n	80018c2 <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b08      	cmp	r3, #8
 800189c:	d111      	bne.n	80018c2 <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d105      	bne.n	80018c2 <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ba:	f043 0201 	orr.w	r2, r3, #1
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d104      	bne.n	80018da <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2208      	movs	r2, #8
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	e008      	b.n	80018ec <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d103      	bne.n	80018ec <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	220c      	movs	r2, #12
 80018ea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001904:	4618      	mov	r0, r3
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001918:	2300      	movs	r3, #0
 800191a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d017      	beq.n	8001966 <HAL_ADC_IRQHandler+0x56>
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d012      	beq.n	8001966 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001944:	f003 0310 	and.w	r3, r3, #16
 8001948:	2b00      	cmp	r3, #0
 800194a:	d105      	bne.n	8001958 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001950:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 fe27 	bl	80025ac <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2202      	movs	r2, #2
 8001964:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d004      	beq.n	800197a <HAL_ADC_IRQHandler+0x6a>
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001980:	2b00      	cmp	r3, #0
 8001982:	d05e      	beq.n	8001a42 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d059      	beq.n	8001a42 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	f003 0310 	and.w	r3, r3, #16
 8001996:	2b00      	cmp	r3, #0
 8001998:	d105      	bne.n	80019a6 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fc1c 	bl	80011e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d03e      	beq.n	8001a34 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d135      	bne.n	8001a34 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d12e      	bne.n	8001a34 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fd2f 	bl	800143e <LL_ADC_REG_IsConversionOngoing>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d11a      	bne.n	8001a1c <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 020c 	bic.w	r2, r2, #12
 80019f4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d112      	bne.n	8001a34 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a12:	f043 0201 	orr.w	r2, r3, #1
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	659a      	str	r2, [r3, #88]	; 0x58
 8001a1a:	e00b      	b.n	8001a34 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a20:	f043 0210 	orr.w	r2, r3, #16
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2c:	f043 0201 	orr.w	r2, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f91f 	bl	8001c78 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	220c      	movs	r2, #12
 8001a40:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	f003 0320 	and.w	r3, r3, #32
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d004      	beq.n	8001a56 <HAL_ADC_IRQHandler+0x146>
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f003 0320 	and.w	r3, r3, #32
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d109      	bne.n	8001a6a <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d072      	beq.n	8001b46 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d06d      	beq.n	8001b46 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d105      	bne.n	8001a82 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fbed 	bl	8001266 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001a8c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fba8 	bl	80011e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a98:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10c      	bne.n	8001ac2 <HAL_ADC_IRQHandler+0x1b2>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d142      	bne.n	8001b38 <HAL_ADC_IRQHandler+0x228>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d03f      	beq.n	8001b38 <HAL_ADC_IRQHandler+0x228>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d13a      	bne.n	8001b38 <HAL_ADC_IRQHandler+0x228>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001acc:	2b40      	cmp	r3, #64	; 0x40
 8001ace:	d133      	bne.n	8001b38 <HAL_ADC_IRQHandler+0x228>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d12e      	bne.n	8001b38 <HAL_ADC_IRQHandler+0x228>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fcc0 	bl	8001464 <LL_ADC_INJ_IsConversionOngoing>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d11a      	bne.n	8001b20 <HAL_ADC_IRQHandler+0x210>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001af8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d112      	bne.n	8001b38 <HAL_ADC_IRQHandler+0x228>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b16:	f043 0201 	orr.w	r2, r3, #1
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	659a      	str	r2, [r3, #88]	; 0x58
 8001b1e:	e00b      	b.n	8001b38 <HAL_ADC_IRQHandler+0x228>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b24:	f043 0210 	orr.w	r2, r3, #16
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b30:	f043 0201 	orr.w	r2, r3, #1
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 fd0f 	bl	800255c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2260      	movs	r2, #96	; 0x60
 8001b44:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d011      	beq.n	8001b74 <HAL_ADC_IRQHandler+0x264>
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00c      	beq.n	8001b74 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f890 	bl	8001c8c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2280      	movs	r2, #128	; 0x80
 8001b72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d012      	beq.n	8001ba4 <HAL_ADC_IRQHandler+0x294>
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00d      	beq.n	8001ba4 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 fcf5 	bl	8002584 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ba2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d012      	beq.n	8001bd4 <HAL_ADC_IRQHandler+0x2c4>
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00d      	beq.n	8001bd4 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 fce7 	bl	8002598 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	f003 0310 	and.w	r3, r3, #16
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d02a      	beq.n	8001c34 <HAL_ADC_IRQHandler+0x324>
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f003 0310 	and.w	r3, r3, #16
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d025      	beq.n	8001c34 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d102      	bne.n	8001bf6 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	61fb      	str	r3, [r7, #28]
 8001bf4:	e008      	b.n	8001c08 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001c04:	2301      	movs	r3, #1
 8001c06:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d10e      	bne.n	8001c2c <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c12:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1e:	f043 0202 	orr.w	r2, r3, #2
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f83a 	bl	8001ca0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2210      	movs	r2, #16
 8001c32:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d018      	beq.n	8001c70 <HAL_ADC_IRQHandler+0x360>
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d013      	beq.n	8001c70 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c58:	f043 0208 	orr.w	r2, r3, #8
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c68:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 fc80 	bl	8002570 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001c70:	bf00      	nop
 8001c72:	3720      	adds	r7, #32
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b0b6      	sub	sp, #216	; 0xd8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d101      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x22>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e3d4      	b.n	8002480 <HAL_ADC_ConfigChannel+0x7cc>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fbab 	bl	800143e <LL_ADC_REG_IsConversionOngoing>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f040 83b9 	bne.w	8002462 <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b05      	cmp	r3, #5
 8001cf6:	d824      	bhi.n	8001d42 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	3b02      	subs	r3, #2
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d81b      	bhi.n	8001d3a <HAL_ADC_ConfigChannel+0x86>
 8001d02:	a201      	add	r2, pc, #4	; (adr r2, 8001d08 <HAL_ADC_ConfigChannel+0x54>)
 8001d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d08:	08001d19 	.word	0x08001d19
 8001d0c:	08001d21 	.word	0x08001d21
 8001d10:	08001d29 	.word	0x08001d29
 8001d14:	08001d31 	.word	0x08001d31
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	605a      	str	r2, [r3, #4]
          break;
 8001d1e:	e011      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	2212      	movs	r2, #18
 8001d24:	605a      	str	r2, [r3, #4]
          break;
 8001d26:	e00d      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	2218      	movs	r2, #24
 8001d2c:	605a      	str	r2, [r3, #4]
          break;
 8001d2e:	e009      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d36:	605a      	str	r2, [r3, #4]
          break;
 8001d38:	e004      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	2206      	movs	r2, #6
 8001d3e:	605a      	str	r2, [r3, #4]
          break;
 8001d40:	e000      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001d42:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6818      	ldr	r0, [r3, #0]
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	6859      	ldr	r1, [r3, #4]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	f7ff fa5c 	bl	800120e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fb6f 	bl	800143e <LL_ADC_REG_IsConversionOngoing>
 8001d60:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff fb7b 	bl	8001464 <LL_ADC_INJ_IsConversionOngoing>
 8001d6e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d72:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f040 81c1 	bne.w	80020fe <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f040 81bc 	bne.w	80020fe <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d8e:	d10f      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f7ff fa76 	bl	800128c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fa0a 	bl	80011c2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001dae:	e00e      	b.n	8001dce <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	6819      	ldr	r1, [r3, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	f7ff fa65 	bl	800128c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff f9fa 	bl	80011c2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	695a      	ldr	r2, [r3, #20]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	08db      	lsrs	r3, r3, #3
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d00a      	beq.n	8001e06 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6818      	ldr	r0, [r3, #0]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	6919      	ldr	r1, [r3, #16]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e00:	f7ff f98a 	bl	8001118 <LL_ADC_SetOffset>
 8001e04:	e17b      	b.n	80020fe <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff f9a7 	bl	8001160 <LL_ADC_GetOffsetChannel>
 8001e12:	4603      	mov	r3, r0
 8001e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10a      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x17e>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2100      	movs	r1, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff f99c 	bl	8001160 <LL_ADC_GetOffsetChannel>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	0e9b      	lsrs	r3, r3, #26
 8001e2c:	f003 021f 	and.w	r2, r3, #31
 8001e30:	e01e      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x1bc>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2100      	movs	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff f991 	bl	8001160 <LL_ADC_GetOffsetChannel>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e48:	fa93 f3a3 	rbit	r3, r3
 8001e4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001e60:	2320      	movs	r3, #32
 8001e62:	e004      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001e64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e68:	fab3 f383 	clz	r3, r3
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d105      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x1d4>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	0e9b      	lsrs	r3, r3, #26
 8001e82:	f003 031f 	and.w	r3, r3, #31
 8001e86:	e018      	b.n	8001eba <HAL_ADC_ConfigChannel+0x206>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e94:	fa93 f3a3 	rbit	r3, r3
 8001e98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001e9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001ea4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001eac:	2320      	movs	r3, #32
 8001eae:	e004      	b.n	8001eba <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001eb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001eb4:	fab3 f383 	clz	r3, r3
 8001eb8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d106      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff f960 	bl	800118c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff f944 	bl	8001160 <LL_ADC_GetOffsetChannel>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10a      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x244>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff f939 	bl	8001160 <LL_ADC_GetOffsetChannel>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	0e9b      	lsrs	r3, r3, #26
 8001ef2:	f003 021f 	and.w	r2, r3, #31
 8001ef6:	e01e      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x282>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2101      	movs	r1, #1
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff f92e 	bl	8001160 <LL_ADC_GetOffsetChannel>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001f16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001f1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001f26:	2320      	movs	r3, #32
 8001f28:	e004      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001f2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f2e:	fab3 f383 	clz	r3, r3
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d105      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x29a>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	0e9b      	lsrs	r3, r3, #26
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	e018      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x2cc>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f5a:	fa93 f3a3 	rbit	r3, r3
 8001f5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001f62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001f6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001f72:	2320      	movs	r3, #32
 8001f74:	e004      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001f76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f7a:	fab3 f383 	clz	r3, r3
 8001f7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d106      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff f8fd 	bl	800118c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2102      	movs	r1, #2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff f8e1 	bl	8001160 <LL_ADC_GetOffsetChannel>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10a      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x30a>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2102      	movs	r1, #2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff f8d6 	bl	8001160 <LL_ADC_GetOffsetChannel>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	0e9b      	lsrs	r3, r3, #26
 8001fb8:	f003 021f 	and.w	r2, r3, #31
 8001fbc:	e01e      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x348>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2102      	movs	r1, #2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff f8cb 	bl	8001160 <LL_ADC_GetOffsetChannel>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fd4:	fa93 f3a3 	rbit	r3, r3
 8001fd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001fdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fe0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001fe4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001fec:	2320      	movs	r3, #32
 8001fee:	e004      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001ff0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ff4:	fab3 f383 	clz	r3, r3
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002004:	2b00      	cmp	r3, #0
 8002006:	d105      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x360>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	0e9b      	lsrs	r3, r3, #26
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	e016      	b.n	8002042 <HAL_ADC_ConfigChannel+0x38e>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002020:	fa93 f3a3 	rbit	r3, r3
 8002024:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002026:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002028:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800202c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002034:	2320      	movs	r3, #32
 8002036:	e004      	b.n	8002042 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002038:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800203c:	fab3 f383 	clz	r3, r3
 8002040:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002042:	429a      	cmp	r2, r3
 8002044:	d106      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2200      	movs	r2, #0
 800204c:	2102      	movs	r1, #2
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff f89c 	bl	800118c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2103      	movs	r1, #3
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff f880 	bl	8001160 <LL_ADC_GetOffsetChannel>
 8002060:	4603      	mov	r3, r0
 8002062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10a      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x3cc>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2103      	movs	r1, #3
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff f875 	bl	8001160 <LL_ADC_GetOffsetChannel>
 8002076:	4603      	mov	r3, r0
 8002078:	0e9b      	lsrs	r3, r3, #26
 800207a:	f003 021f 	and.w	r2, r3, #31
 800207e:	e017      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x3fc>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2103      	movs	r1, #3
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff f86a 	bl	8001160 <LL_ADC_GetOffsetChannel>
 800208c:	4603      	mov	r3, r0
 800208e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002092:	fa93 f3a3 	rbit	r3, r3
 8002096:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002098:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800209a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800209c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80020a2:	2320      	movs	r3, #32
 80020a4:	e003      	b.n	80020ae <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80020a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020a8:	fab3 f383 	clz	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d105      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x414>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	0e9b      	lsrs	r3, r3, #26
 80020c2:	f003 031f 	and.w	r3, r3, #31
 80020c6:	e011      	b.n	80020ec <HAL_ADC_ConfigChannel+0x438>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020d0:	fa93 f3a3 	rbit	r3, r3
 80020d4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80020d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80020da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80020e0:	2320      	movs	r3, #32
 80020e2:	e003      	b.n	80020ec <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80020e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020e6:	fab3 f383 	clz	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d106      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2200      	movs	r2, #0
 80020f6:	2103      	movs	r1, #3
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff f847 	bl	800118c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff f974 	bl	80013f0 <LL_ADC_IsEnabled>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	f040 8140 	bne.w	8002390 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	6819      	ldr	r1, [r3, #0]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	461a      	mov	r2, r3
 800211e:	f7ff f8e1 	bl	80012e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	4a8f      	ldr	r2, [pc, #572]	; (8002364 <HAL_ADC_ConfigChannel+0x6b0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	f040 8131 	bne.w	8002390 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10b      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x4a2>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	0e9b      	lsrs	r3, r3, #26
 8002144:	3301      	adds	r3, #1
 8002146:	f003 031f 	and.w	r3, r3, #31
 800214a:	2b09      	cmp	r3, #9
 800214c:	bf94      	ite	ls
 800214e:	2301      	movls	r3, #1
 8002150:	2300      	movhi	r3, #0
 8002152:	b2db      	uxtb	r3, r3
 8002154:	e019      	b.n	800218a <HAL_ADC_ConfigChannel+0x4d6>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002164:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002166:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002168:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800216e:	2320      	movs	r3, #32
 8002170:	e003      	b.n	800217a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002174:	fab3 f383 	clz	r3, r3
 8002178:	b2db      	uxtb	r3, r3
 800217a:	3301      	adds	r3, #1
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	2b09      	cmp	r3, #9
 8002182:	bf94      	ite	ls
 8002184:	2301      	movls	r3, #1
 8002186:	2300      	movhi	r3, #0
 8002188:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800218a:	2b00      	cmp	r3, #0
 800218c:	d079      	beq.n	8002282 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002196:	2b00      	cmp	r3, #0
 8002198:	d107      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x4f6>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	0e9b      	lsrs	r3, r3, #26
 80021a0:	3301      	adds	r3, #1
 80021a2:	069b      	lsls	r3, r3, #26
 80021a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021a8:	e015      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x522>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80021bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80021c2:	2320      	movs	r3, #32
 80021c4:	e003      	b.n	80021ce <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80021c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021c8:	fab3 f383 	clz	r3, r3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	3301      	adds	r3, #1
 80021d0:	069b      	lsls	r3, r3, #26
 80021d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d109      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x542>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	0e9b      	lsrs	r3, r3, #26
 80021e8:	3301      	adds	r3, #1
 80021ea:	f003 031f 	and.w	r3, r3, #31
 80021ee:	2101      	movs	r1, #1
 80021f0:	fa01 f303 	lsl.w	r3, r1, r3
 80021f4:	e017      	b.n	8002226 <HAL_ADC_ConfigChannel+0x572>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021fe:	fa93 f3a3 	rbit	r3, r3
 8002202:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002206:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800220e:	2320      	movs	r3, #32
 8002210:	e003      	b.n	800221a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002214:	fab3 f383 	clz	r3, r3
 8002218:	b2db      	uxtb	r3, r3
 800221a:	3301      	adds	r3, #1
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	2101      	movs	r1, #1
 8002222:	fa01 f303 	lsl.w	r3, r1, r3
 8002226:	ea42 0103 	orr.w	r1, r2, r3
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10a      	bne.n	800224c <HAL_ADC_ConfigChannel+0x598>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	0e9b      	lsrs	r3, r3, #26
 800223c:	3301      	adds	r3, #1
 800223e:	f003 021f 	and.w	r2, r3, #31
 8002242:	4613      	mov	r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4413      	add	r3, r2
 8002248:	051b      	lsls	r3, r3, #20
 800224a:	e018      	b.n	800227e <HAL_ADC_ConfigChannel+0x5ca>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002254:	fa93 f3a3 	rbit	r3, r3
 8002258:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800225a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800225e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002264:	2320      	movs	r3, #32
 8002266:	e003      	b.n	8002270 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	3301      	adds	r3, #1
 8002272:	f003 021f 	and.w	r2, r3, #31
 8002276:	4613      	mov	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4413      	add	r3, r2
 800227c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800227e:	430b      	orrs	r3, r1
 8002280:	e081      	b.n	8002386 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228a:	2b00      	cmp	r3, #0
 800228c:	d107      	bne.n	800229e <HAL_ADC_ConfigChannel+0x5ea>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	0e9b      	lsrs	r3, r3, #26
 8002294:	3301      	adds	r3, #1
 8002296:	069b      	lsls	r3, r3, #26
 8002298:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800229c:	e015      	b.n	80022ca <HAL_ADC_ConfigChannel+0x616>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a6:	fa93 f3a3 	rbit	r3, r3
 80022aa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80022ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ae:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80022b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80022b6:	2320      	movs	r3, #32
 80022b8:	e003      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80022ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022bc:	fab3 f383 	clz	r3, r3
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	3301      	adds	r3, #1
 80022c4:	069b      	lsls	r3, r3, #26
 80022c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d109      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x636>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	0e9b      	lsrs	r3, r3, #26
 80022dc:	3301      	adds	r3, #1
 80022de:	f003 031f 	and.w	r3, r3, #31
 80022e2:	2101      	movs	r1, #1
 80022e4:	fa01 f303 	lsl.w	r3, r1, r3
 80022e8:	e017      	b.n	800231a <HAL_ADC_ConfigChannel+0x666>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	fa93 f3a3 	rbit	r3, r3
 80022f6:	61fb      	str	r3, [r7, #28]
  return result;
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002302:	2320      	movs	r3, #32
 8002304:	e003      	b.n	800230e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	fab3 f383 	clz	r3, r3
 800230c:	b2db      	uxtb	r3, r3
 800230e:	3301      	adds	r3, #1
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	2101      	movs	r1, #1
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	ea42 0103 	orr.w	r1, r2, r3
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10d      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x692>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	0e9b      	lsrs	r3, r3, #26
 8002330:	3301      	adds	r3, #1
 8002332:	f003 021f 	and.w	r2, r3, #31
 8002336:	4613      	mov	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4413      	add	r3, r2
 800233c:	3b1e      	subs	r3, #30
 800233e:	051b      	lsls	r3, r3, #20
 8002340:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002344:	e01e      	b.n	8002384 <HAL_ADC_ConfigChannel+0x6d0>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	fa93 f3a3 	rbit	r3, r3
 8002352:	613b      	str	r3, [r7, #16]
  return result;
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d104      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800235e:	2320      	movs	r3, #32
 8002360:	e006      	b.n	8002370 <HAL_ADC_ConfigChannel+0x6bc>
 8002362:	bf00      	nop
 8002364:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	3301      	adds	r3, #1
 8002372:	f003 021f 	and.w	r2, r3, #31
 8002376:	4613      	mov	r3, r2
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	4413      	add	r3, r2
 800237c:	3b1e      	subs	r3, #30
 800237e:	051b      	lsls	r3, r3, #20
 8002380:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002384:	430b      	orrs	r3, r1
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	6892      	ldr	r2, [r2, #8]
 800238a:	4619      	mov	r1, r3
 800238c:	f7fe ff7e 	bl	800128c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b3c      	ldr	r3, [pc, #240]	; (8002488 <HAL_ADC_ConfigChannel+0x7d4>)
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d06b      	beq.n	8002474 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800239c:	483b      	ldr	r0, [pc, #236]	; (800248c <HAL_ADC_ConfigChannel+0x7d8>)
 800239e:	f7fe fead 	bl	80010fc <LL_ADC_GetCommonPathInternalCh>
 80023a2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a39      	ldr	r2, [pc, #228]	; (8002490 <HAL_ADC_ConfigChannel+0x7dc>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d126      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d120      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a34      	ldr	r2, [pc, #208]	; (8002494 <HAL_ADC_ConfigChannel+0x7e0>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d156      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023ce:	4619      	mov	r1, r3
 80023d0:	482e      	ldr	r0, [pc, #184]	; (800248c <HAL_ADC_ConfigChannel+0x7d8>)
 80023d2:	f7fe fe80 	bl	80010d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80023d6:	4b30      	ldr	r3, [pc, #192]	; (8002498 <HAL_ADC_ConfigChannel+0x7e4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	099b      	lsrs	r3, r3, #6
 80023dc:	4a2f      	ldr	r2, [pc, #188]	; (800249c <HAL_ADC_ConfigChannel+0x7e8>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	099a      	lsrs	r2, r3, #6
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023ee:	e002      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f9      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023fc:	e03a      	b.n	8002474 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a27      	ldr	r2, [pc, #156]	; (80024a0 <HAL_ADC_ConfigChannel+0x7ec>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d113      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x77c>
 8002408:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800240c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10d      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a1e      	ldr	r2, [pc, #120]	; (8002494 <HAL_ADC_ConfigChannel+0x7e0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d12a      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800241e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002426:	4619      	mov	r1, r3
 8002428:	4818      	ldr	r0, [pc, #96]	; (800248c <HAL_ADC_ConfigChannel+0x7d8>)
 800242a:	f7fe fe54 	bl	80010d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800242e:	e021      	b.n	8002474 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a1b      	ldr	r2, [pc, #108]	; (80024a4 <HAL_ADC_ConfigChannel+0x7f0>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d11c      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800243a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800243e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d116      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a12      	ldr	r2, [pc, #72]	; (8002494 <HAL_ADC_ConfigChannel+0x7e0>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d111      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002450:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002454:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002458:	4619      	mov	r1, r3
 800245a:	480c      	ldr	r0, [pc, #48]	; (800248c <HAL_ADC_ConfigChannel+0x7d8>)
 800245c:	f7fe fe3b 	bl	80010d6 <LL_ADC_SetCommonPathInternalCh>
 8002460:	e008      	b.n	8002474 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002466:	f043 0220 	orr.w	r2, r3, #32
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800247c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002480:	4618      	mov	r0, r3
 8002482:	37d8      	adds	r7, #216	; 0xd8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	80080000 	.word	0x80080000
 800248c:	50040300 	.word	0x50040300
 8002490:	c7520000 	.word	0xc7520000
 8002494:	50040000 	.word	0x50040000
 8002498:	20000000 	.word	0x20000000
 800249c:	053e2d63 	.word	0x053e2d63
 80024a0:	cb840000 	.word	0xcb840000
 80024a4:	80000001 	.word	0x80000001

080024a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe ff9b 	bl	80013f0 <LL_ADC_IsEnabled>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d146      	bne.n	800254e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	4b24      	ldr	r3, [pc, #144]	; (8002558 <ADC_Enable+0xb0>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00d      	beq.n	80024ea <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d2:	f043 0210 	orr.w	r2, r3, #16
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024de:	f043 0201 	orr.w	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e032      	b.n	8002550 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe ff6a 	bl	80013c8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80024f4:	f7fe fdd0 	bl	8001098 <HAL_GetTick>
 80024f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024fa:	e021      	b.n	8002540 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe ff75 	bl	80013f0 <LL_ADC_IsEnabled>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d104      	bne.n	8002516 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe ff59 	bl	80013c8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002516:	f7fe fdbf 	bl	8001098 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d90d      	bls.n	8002540 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002528:	f043 0210 	orr.w	r2, r3, #16
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002534:	f043 0201 	orr.w	r2, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e007      	b.n	8002550 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b01      	cmp	r3, #1
 800254c:	d1d6      	bne.n	80024fc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	8000003f 	.word	0x8000003f

0800255c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <__NVIC_SetPriorityGrouping+0x44>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025dc:	4013      	ands	r3, r2
 80025de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025f2:	4a04      	ldr	r2, [pc, #16]	; (8002604 <__NVIC_SetPriorityGrouping+0x44>)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	60d3      	str	r3, [r2, #12]
}
 80025f8:	bf00      	nop
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800260c:	4b04      	ldr	r3, [pc, #16]	; (8002620 <__NVIC_GetPriorityGrouping+0x18>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	0a1b      	lsrs	r3, r3, #8
 8002612:	f003 0307 	and.w	r3, r3, #7
}
 8002616:	4618      	mov	r0, r3
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	2b00      	cmp	r3, #0
 8002634:	db0b      	blt.n	800264e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	f003 021f 	and.w	r2, r3, #31
 800263c:	4907      	ldr	r1, [pc, #28]	; (800265c <__NVIC_EnableIRQ+0x38>)
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	095b      	lsrs	r3, r3, #5
 8002644:	2001      	movs	r0, #1
 8002646:	fa00 f202 	lsl.w	r2, r0, r2
 800264a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	e000e100 	.word	0xe000e100

08002660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	6039      	str	r1, [r7, #0]
 800266a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002670:	2b00      	cmp	r3, #0
 8002672:	db0a      	blt.n	800268a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	b2da      	uxtb	r2, r3
 8002678:	490c      	ldr	r1, [pc, #48]	; (80026ac <__NVIC_SetPriority+0x4c>)
 800267a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267e:	0112      	lsls	r2, r2, #4
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	440b      	add	r3, r1
 8002684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002688:	e00a      	b.n	80026a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	b2da      	uxtb	r2, r3
 800268e:	4908      	ldr	r1, [pc, #32]	; (80026b0 <__NVIC_SetPriority+0x50>)
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	3b04      	subs	r3, #4
 8002698:	0112      	lsls	r2, r2, #4
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	440b      	add	r3, r1
 800269e:	761a      	strb	r2, [r3, #24]
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000e100 	.word	0xe000e100
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b089      	sub	sp, #36	; 0x24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f1c3 0307 	rsb	r3, r3, #7
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	bf28      	it	cs
 80026d2:	2304      	movcs	r3, #4
 80026d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3304      	adds	r3, #4
 80026da:	2b06      	cmp	r3, #6
 80026dc:	d902      	bls.n	80026e4 <NVIC_EncodePriority+0x30>
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3b03      	subs	r3, #3
 80026e2:	e000      	b.n	80026e6 <NVIC_EncodePriority+0x32>
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43da      	mvns	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	401a      	ands	r2, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	fa01 f303 	lsl.w	r3, r1, r3
 8002706:	43d9      	mvns	r1, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800270c:	4313      	orrs	r3, r2
         );
}
 800270e:	4618      	mov	r0, r3
 8002710:	3724      	adds	r7, #36	; 0x24
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3b01      	subs	r3, #1
 8002728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800272c:	d301      	bcc.n	8002732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800272e:	2301      	movs	r3, #1
 8002730:	e00f      	b.n	8002752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002732:	4a0a      	ldr	r2, [pc, #40]	; (800275c <SysTick_Config+0x40>)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3b01      	subs	r3, #1
 8002738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800273a:	210f      	movs	r1, #15
 800273c:	f04f 30ff 	mov.w	r0, #4294967295
 8002740:	f7ff ff8e 	bl	8002660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <SysTick_Config+0x40>)
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800274a:	4b04      	ldr	r3, [pc, #16]	; (800275c <SysTick_Config+0x40>)
 800274c:	2207      	movs	r2, #7
 800274e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	e000e010 	.word	0xe000e010

08002760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff ff29 	bl	80025c0 <__NVIC_SetPriorityGrouping>
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b086      	sub	sp, #24
 800277a:	af00      	add	r7, sp, #0
 800277c:	4603      	mov	r3, r0
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002788:	f7ff ff3e 	bl	8002608 <__NVIC_GetPriorityGrouping>
 800278c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	6978      	ldr	r0, [r7, #20]
 8002794:	f7ff ff8e 	bl	80026b4 <NVIC_EncodePriority>
 8002798:	4602      	mov	r2, r0
 800279a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800279e:	4611      	mov	r1, r2
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff ff5d 	bl	8002660 <__NVIC_SetPriority>
}
 80027a6:	bf00      	nop
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	4603      	mov	r3, r0
 80027b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff ff31 	bl	8002624 <__NVIC_EnableIRQ>
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff ffa2 	bl	800271c <SysTick_Config>
 80027d8:	4603      	mov	r3, r0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b084      	sub	sp, #16
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d005      	beq.n	8002806 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2204      	movs	r2, #4
 80027fe:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
 8002804:	e029      	b.n	800285a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 020e 	bic.w	r2, r2, #14
 8002814:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0201 	bic.w	r2, r2, #1
 8002824:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	f003 021c 	and.w	r2, r3, #28
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	2101      	movs	r1, #1
 8002834:	fa01 f202 	lsl.w	r2, r1, r2
 8002838:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	4798      	blx	r3
    }
  }
  return status;
 800285a:	7bfb      	ldrb	r3, [r7, #15]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002872:	b2db      	uxtb	r3, r3
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800288e:	e154      	b.n	8002b3a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	2101      	movs	r1, #1
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	fa01 f303 	lsl.w	r3, r1, r3
 800289c:	4013      	ands	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 8146 	beq.w	8002b34 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d00b      	beq.n	80028c8 <HAL_GPIO_Init+0x48>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d007      	beq.n	80028c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028bc:	2b11      	cmp	r3, #17
 80028be:	d003      	beq.n	80028c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b12      	cmp	r3, #18
 80028c6:	d130      	bne.n	800292a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	2203      	movs	r2, #3
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4013      	ands	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028fe:	2201      	movs	r2, #1
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4013      	ands	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	091b      	lsrs	r3, r3, #4
 8002914:	f003 0201 	and.w	r2, r3, #1
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	2203      	movs	r2, #3
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4013      	ands	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0xea>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b12      	cmp	r3, #18
 8002968:	d123      	bne.n	80029b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	08da      	lsrs	r2, r3, #3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3208      	adds	r2, #8
 8002972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002976:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	220f      	movs	r2, #15
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4013      	ands	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	691a      	ldr	r2, [r3, #16]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	08da      	lsrs	r2, r3, #3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3208      	adds	r2, #8
 80029ac:	6939      	ldr	r1, [r7, #16]
 80029ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	2203      	movs	r2, #3
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4013      	ands	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 0203 	and.w	r2, r3, #3
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 80a0 	beq.w	8002b34 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f4:	4b58      	ldr	r3, [pc, #352]	; (8002b58 <HAL_GPIO_Init+0x2d8>)
 80029f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f8:	4a57      	ldr	r2, [pc, #348]	; (8002b58 <HAL_GPIO_Init+0x2d8>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	6613      	str	r3, [r2, #96]	; 0x60
 8002a00:	4b55      	ldr	r3, [pc, #340]	; (8002b58 <HAL_GPIO_Init+0x2d8>)
 8002a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a0c:	4a53      	ldr	r2, [pc, #332]	; (8002b5c <HAL_GPIO_Init+0x2dc>)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	089b      	lsrs	r3, r3, #2
 8002a12:	3302      	adds	r3, #2
 8002a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	220f      	movs	r2, #15
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a36:	d019      	beq.n	8002a6c <HAL_GPIO_Init+0x1ec>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a49      	ldr	r2, [pc, #292]	; (8002b60 <HAL_GPIO_Init+0x2e0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d013      	beq.n	8002a68 <HAL_GPIO_Init+0x1e8>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a48      	ldr	r2, [pc, #288]	; (8002b64 <HAL_GPIO_Init+0x2e4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d00d      	beq.n	8002a64 <HAL_GPIO_Init+0x1e4>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a47      	ldr	r2, [pc, #284]	; (8002b68 <HAL_GPIO_Init+0x2e8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d007      	beq.n	8002a60 <HAL_GPIO_Init+0x1e0>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a46      	ldr	r2, [pc, #280]	; (8002b6c <HAL_GPIO_Init+0x2ec>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d101      	bne.n	8002a5c <HAL_GPIO_Init+0x1dc>
 8002a58:	2304      	movs	r3, #4
 8002a5a:	e008      	b.n	8002a6e <HAL_GPIO_Init+0x1ee>
 8002a5c:	2307      	movs	r3, #7
 8002a5e:	e006      	b.n	8002a6e <HAL_GPIO_Init+0x1ee>
 8002a60:	2303      	movs	r3, #3
 8002a62:	e004      	b.n	8002a6e <HAL_GPIO_Init+0x1ee>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e002      	b.n	8002a6e <HAL_GPIO_Init+0x1ee>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <HAL_GPIO_Init+0x1ee>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	f002 0203 	and.w	r2, r2, #3
 8002a74:	0092      	lsls	r2, r2, #2
 8002a76:	4093      	lsls	r3, r2
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a7e:	4937      	ldr	r1, [pc, #220]	; (8002b5c <HAL_GPIO_Init+0x2dc>)
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	089b      	lsrs	r3, r3, #2
 8002a84:	3302      	adds	r3, #2
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a8c:	4b38      	ldr	r3, [pc, #224]	; (8002b70 <HAL_GPIO_Init+0x2f0>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ab0:	4a2f      	ldr	r2, [pc, #188]	; (8002b70 <HAL_GPIO_Init+0x2f0>)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002ab6:	4b2e      	ldr	r3, [pc, #184]	; (8002b70 <HAL_GPIO_Init+0x2f0>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ada:	4a25      	ldr	r2, [pc, #148]	; (8002b70 <HAL_GPIO_Init+0x2f0>)
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ae0:	4b23      	ldr	r3, [pc, #140]	; (8002b70 <HAL_GPIO_Init+0x2f0>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4013      	ands	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b04:	4a1a      	ldr	r2, [pc, #104]	; (8002b70 <HAL_GPIO_Init+0x2f0>)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b0a:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <HAL_GPIO_Init+0x2f0>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	43db      	mvns	r3, r3
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	4013      	ands	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b2e:	4a10      	ldr	r2, [pc, #64]	; (8002b70 <HAL_GPIO_Init+0x2f0>)
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	3301      	adds	r3, #1
 8002b38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	fa22 f303 	lsr.w	r3, r2, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f47f aea3 	bne.w	8002890 <HAL_GPIO_Init+0x10>
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	371c      	adds	r7, #28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40010000 	.word	0x40010000
 8002b60:	48000400 	.word	0x48000400
 8002b64:	48000800 	.word	0x48000800
 8002b68:	48000c00 	.word	0x48000c00
 8002b6c:	48001000 	.word	0x48001000
 8002b70:	40010400 	.word	0x40010400

08002b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	807b      	strh	r3, [r7, #2]
 8002b80:	4613      	mov	r3, r2
 8002b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b84:	787b      	ldrb	r3, [r7, #1]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b8a:	887a      	ldrh	r2, [r7, #2]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b90:	e002      	b.n	8002b98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b92:	887a      	ldrh	r2, [r7, #2]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e081      	b.n	8002cba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d106      	bne.n	8002bd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7fd fc5e 	bl	800048c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2224      	movs	r2, #36	; 0x24
 8002bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0201 	bic.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bf4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c04:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d107      	bne.n	8002c1e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	e006      	b.n	8002c2c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c2a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d104      	bne.n	8002c3e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	ea42 0103 	orr.w	r1, r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	021a      	lsls	r2, r3, #8
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69d9      	ldr	r1, [r3, #28]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1a      	ldr	r2, [r3, #32]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b084      	sub	sp, #16
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	68f9      	ldr	r1, [r7, #12]
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	4798      	blx	r3
  }
}
 8002cee:	bf00      	nop
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b086      	sub	sp, #24
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	0a1b      	lsrs	r3, r3, #8
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d010      	beq.n	8002d3c <HAL_I2C_ER_IRQHandler+0x46>
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	09db      	lsrs	r3, r3, #7
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f043 0201 	orr.w	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d3a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	0a9b      	lsrs	r3, r3, #10
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d010      	beq.n	8002d6a <HAL_I2C_ER_IRQHandler+0x74>
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	09db      	lsrs	r3, r3, #7
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d58:	f043 0208 	orr.w	r2, r3, #8
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d68:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	0a5b      	lsrs	r3, r3, #9
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d010      	beq.n	8002d98 <HAL_I2C_ER_IRQHandler+0xa2>
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	09db      	lsrs	r3, r3, #7
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	f043 0202 	orr.w	r2, r3, #2
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d96:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f003 030b 	and.w	r3, r3, #11
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002da8:	68f9      	ldr	r1, [r7, #12]
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fb8a 	bl	80034c4 <I2C_ITError>
  }
}
 8002db0:	bf00      	nop
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	70fb      	strb	r3, [r7, #3]
 8002dec:	4613      	mov	r3, r2
 8002dee:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <I2C_Slave_ISR_IT+0x24>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e0ec      	b.n	8003036 <I2C_Slave_ISR_IT+0x1fe>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d009      	beq.n	8002e84 <I2C_Slave_ISR_IT+0x4c>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002e7c:	6939      	ldr	r1, [r7, #16]
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 f9c0 	bl	8003204 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	091b      	lsrs	r3, r3, #4
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d04d      	beq.n	8002f2c <I2C_Slave_ISR_IT+0xf4>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d047      	beq.n	8002f2c <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d128      	bne.n	8002ef8 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b28      	cmp	r3, #40	; 0x28
 8002eb0:	d108      	bne.n	8002ec4 <I2C_Slave_ISR_IT+0x8c>
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002eb8:	d104      	bne.n	8002ec4 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002eba:	6939      	ldr	r1, [r7, #16]
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 faab 	bl	8003418 <I2C_ITListenCplt>
 8002ec2:	e032      	b.n	8002f2a <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b29      	cmp	r3, #41	; 0x29
 8002ece:	d10e      	bne.n	8002eee <I2C_Slave_ISR_IT+0xb6>
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ed6:	d00a      	beq.n	8002eee <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2210      	movs	r2, #16
 8002ede:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 fbe6 	bl	80036b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f92d 	bl	8003146 <I2C_ITSlaveSeqCplt>
 8002eec:	e01d      	b.n	8002f2a <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2210      	movs	r2, #16
 8002ef4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002ef6:	e096      	b.n	8003026 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2210      	movs	r2, #16
 8002efe:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f04:	f043 0204 	orr.w	r2, r3, #4
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d004      	beq.n	8002f1c <I2C_Slave_ISR_IT+0xe4>
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f18:	f040 8085 	bne.w	8003026 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f20:	4619      	mov	r1, r3
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 face 	bl	80034c4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002f28:	e07d      	b.n	8003026 <I2C_Slave_ISR_IT+0x1ee>
 8002f2a:	e07c      	b.n	8003026 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	089b      	lsrs	r3, r3, #2
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d030      	beq.n	8002f9a <I2C_Slave_ISR_IT+0x162>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	089b      	lsrs	r3, r3, #2
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d02a      	beq.n	8002f9a <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d018      	beq.n	8002f80 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d14f      	bne.n	800302a <I2C_Slave_ISR_IT+0x1f2>
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f90:	d04b      	beq.n	800302a <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f8d7 	bl	8003146 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002f98:	e047      	b.n	800302a <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	08db      	lsrs	r3, r3, #3
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	08db      	lsrs	r3, r3, #3
 8002faa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d004      	beq.n	8002fbc <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002fb2:	6939      	ldr	r1, [r7, #16]
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f842 	bl	800303e <I2C_ITAddrCplt>
 8002fba:	e037      	b.n	800302c <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	085b      	lsrs	r3, r3, #1
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d031      	beq.n	800302c <I2C_Slave_ISR_IT+0x1f4>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	085b      	lsrs	r3, r3, #1
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d02b      	beq.n	800302c <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d018      	beq.n	8003010 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	781a      	ldrb	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	851a      	strh	r2, [r3, #40]	; 0x28
 800300e:	e00d      	b.n	800302c <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003016:	d002      	beq.n	800301e <I2C_Slave_ISR_IT+0x1e6>
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f891 	bl	8003146 <I2C_ITSlaveSeqCplt>
 8003024:	e002      	b.n	800302c <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003026:	bf00      	nop
 8003028:	e000      	b.n	800302c <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800302a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b084      	sub	sp, #16
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800304e:	b2db      	uxtb	r3, r3
 8003050:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003054:	2b28      	cmp	r3, #40	; 0x28
 8003056:	d16a      	bne.n	800312e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	0c1b      	lsrs	r3, r3, #16
 8003060:	b2db      	uxtb	r3, r3
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	0c1b      	lsrs	r3, r3, #16
 8003070:	b29b      	uxth	r3, r3
 8003072:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003076:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	b29b      	uxth	r3, r3
 8003080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003084:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	b29b      	uxth	r3, r3
 800308e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003092:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	2b02      	cmp	r3, #2
 800309a:	d138      	bne.n	800310e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800309c:	897b      	ldrh	r3, [r7, #10]
 800309e:	09db      	lsrs	r3, r3, #7
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	89bb      	ldrh	r3, [r7, #12]
 80030a4:	4053      	eors	r3, r2
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	f003 0306 	and.w	r3, r3, #6
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d11c      	bne.n	80030ea <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80030b0:	897b      	ldrh	r3, [r7, #10]
 80030b2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d13b      	bne.n	800313e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2208      	movs	r2, #8
 80030d2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80030dc:	89ba      	ldrh	r2, [r7, #12]
 80030de:	7bfb      	ldrb	r3, [r7, #15]
 80030e0:	4619      	mov	r1, r3
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff fe7c 	bl	8002de0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80030e8:	e029      	b.n	800313e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80030ea:	893b      	ldrh	r3, [r7, #8]
 80030ec:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80030ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fb1f 	bl	8003736 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003100:	89ba      	ldrh	r2, [r7, #12]
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	4619      	mov	r1, r3
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff fe6a 	bl	8002de0 <HAL_I2C_AddrCallback>
}
 800310c:	e017      	b.n	800313e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800310e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fb0f 	bl	8003736 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003120:	89ba      	ldrh	r2, [r7, #12]
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	4619      	mov	r1, r3
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff fe5a 	bl	8002de0 <HAL_I2C_AddrCallback>
}
 800312c:	e007      	b.n	800313e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2208      	movs	r2, #8
 8003134:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800313e:	bf00      	nop
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	0b9b      	lsrs	r3, r3, #14
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d008      	beq.n	800317c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	e00d      	b.n	8003198 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	0bdb      	lsrs	r3, r3, #15
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d007      	beq.n	8003198 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003196:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b29      	cmp	r3, #41	; 0x29
 80031a2:	d112      	bne.n	80031ca <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2228      	movs	r2, #40	; 0x28
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2221      	movs	r2, #33	; 0x21
 80031b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80031b2:	2101      	movs	r1, #1
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 fabe 	bl	8003736 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff fdf8 	bl	8002db8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80031c8:	e017      	b.n	80031fa <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b2a      	cmp	r3, #42	; 0x2a
 80031d4:	d111      	bne.n	80031fa <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2228      	movs	r2, #40	; 0x28
 80031da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2222      	movs	r2, #34	; 0x22
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80031e4:	2102      	movs	r1, #2
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 faa5 	bl	8003736 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff fde9 	bl	8002dcc <HAL_I2C_SlaveRxCpltCallback>
}
 80031fa:	bf00      	nop
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003220:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2220      	movs	r2, #32
 8003228:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	2b21      	cmp	r3, #33	; 0x21
 800322e:	d002      	beq.n	8003236 <I2C_ITSlaveCplt+0x32>
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	2b29      	cmp	r3, #41	; 0x29
 8003234:	d108      	bne.n	8003248 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003236:	f248 0101 	movw	r1, #32769	; 0x8001
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fa7b 	bl	8003736 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2221      	movs	r2, #33	; 0x21
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
 8003246:	e00d      	b.n	8003264 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	2b22      	cmp	r3, #34	; 0x22
 800324c:	d002      	beq.n	8003254 <I2C_ITSlaveCplt+0x50>
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	2b2a      	cmp	r3, #42	; 0x2a
 8003252:	d107      	bne.n	8003264 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003254:	f248 0102 	movw	r1, #32770	; 0x8002
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 fa6c 	bl	8003736 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2222      	movs	r2, #34	; 0x22
 8003262:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003272:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6859      	ldr	r1, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4b64      	ldr	r3, [pc, #400]	; (8003410 <I2C_ITSlaveCplt+0x20c>)
 8003280:	400b      	ands	r3, r1
 8003282:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 fa14 	bl	80036b2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	0b9b      	lsrs	r3, r3, #14
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d013      	beq.n	80032be <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032a4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d020      	beq.n	80032f0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032bc:	e018      	b.n	80032f0 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	0bdb      	lsrs	r3, r3, #15
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d012      	beq.n	80032f0 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032d8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d006      	beq.n	80032f0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	089b      	lsrs	r3, r3, #2
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d020      	beq.n	800333e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f023 0304 	bic.w	r3, r3, #4
 8003302:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00c      	beq.n	800333e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003334:	b29b      	uxth	r3, r3
 8003336:	3b01      	subs	r3, #1
 8003338:	b29a      	uxth	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003342:	b29b      	uxth	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334c:	f043 0204 	orr.w	r2, r3, #4
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	2b00      	cmp	r3, #0
 8003368:	d010      	beq.n	800338c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	4619      	mov	r1, r3
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f8a7 	bl	80034c4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b28      	cmp	r3, #40	; 0x28
 8003380:	d141      	bne.n	8003406 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003382:	6979      	ldr	r1, [r7, #20]
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f847 	bl	8003418 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800338a:	e03c      	b.n	8003406 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003394:	d014      	beq.n	80033c0 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff fed5 	bl	8003146 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a1d      	ldr	r2, [pc, #116]	; (8003414 <I2C_ITSlaveCplt+0x210>)
 80033a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2220      	movs	r2, #32
 80033a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff fd1f 	bl	8002dfc <HAL_I2C_ListenCpltCallback>
}
 80033be:	e022      	b.n	8003406 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b22      	cmp	r3, #34	; 0x22
 80033ca:	d10e      	bne.n	80033ea <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7ff fcf2 	bl	8002dcc <HAL_I2C_SlaveRxCpltCallback>
}
 80033e8:	e00d      	b.n	8003406 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff fcd9 	bl	8002db8 <HAL_I2C_SlaveTxCpltCallback>
}
 8003406:	bf00      	nop
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	fe00e800 	.word	0xfe00e800
 8003414:	ffff0000 	.word	0xffff0000

08003418 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a26      	ldr	r2, [pc, #152]	; (80034c0 <I2C_ITListenCplt+0xa8>)
 8003426:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2220      	movs	r2, #32
 8003432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	089b      	lsrs	r3, r3, #2
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d022      	beq.n	8003496 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346c:	2b00      	cmp	r3, #0
 800346e:	d012      	beq.n	8003496 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003480:	b29b      	uxth	r3, r3
 8003482:	3b01      	subs	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	f043 0204 	orr.w	r2, r3, #4
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003496:	f248 0103 	movw	r1, #32771	; 0x8003
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f94b 	bl	8003736 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2210      	movs	r2, #16
 80034a6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff fca3 	bl	8002dfc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	ffff0000 	.word	0xffff0000

080034c4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a5d      	ldr	r2, [pc, #372]	; (8003658 <I2C_ITError+0x194>)
 80034e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
 80034f8:	2b28      	cmp	r3, #40	; 0x28
 80034fa:	d005      	beq.n	8003508 <I2C_ITError+0x44>
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	2b29      	cmp	r3, #41	; 0x29
 8003500:	d002      	beq.n	8003508 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003502:	7bfb      	ldrb	r3, [r7, #15]
 8003504:	2b2a      	cmp	r3, #42	; 0x2a
 8003506:	d10b      	bne.n	8003520 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003508:	2103      	movs	r1, #3
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f913 	bl	8003736 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2228      	movs	r2, #40	; 0x28
 8003514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a50      	ldr	r2, [pc, #320]	; (800365c <I2C_ITError+0x198>)
 800351c:	635a      	str	r2, [r3, #52]	; 0x34
 800351e:	e011      	b.n	8003544 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003520:	f248 0103 	movw	r1, #32771	; 0x8003
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f906 	bl	8003736 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b60      	cmp	r3, #96	; 0x60
 8003534:	d003      	beq.n	800353e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354e:	2b00      	cmp	r3, #0
 8003550:	d039      	beq.n	80035c6 <I2C_ITError+0x102>
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2b11      	cmp	r3, #17
 8003556:	d002      	beq.n	800355e <I2C_ITError+0x9a>
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b21      	cmp	r3, #33	; 0x21
 800355c:	d133      	bne.n	80035c6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800356c:	d107      	bne.n	800357e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800357c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff f96e 	bl	8002864 <HAL_DMA_GetState>
 8003588:	4603      	mov	r3, r0
 800358a:	2b01      	cmp	r3, #1
 800358c:	d017      	beq.n	80035be <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	4a33      	ldr	r2, [pc, #204]	; (8003660 <I2C_ITError+0x19c>)
 8003594:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff f91d 	bl	80027e2 <HAL_DMA_Abort_IT>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d04d      	beq.n	800364a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035b8:	4610      	mov	r0, r2
 80035ba:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035bc:	e045      	b.n	800364a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f850 	bl	8003664 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035c4:	e041      	b.n	800364a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d039      	beq.n	8003642 <I2C_ITError+0x17e>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b12      	cmp	r3, #18
 80035d2:	d002      	beq.n	80035da <I2C_ITError+0x116>
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2b22      	cmp	r3, #34	; 0x22
 80035d8:	d133      	bne.n	8003642 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e8:	d107      	bne.n	80035fa <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035f8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff f930 	bl	8002864 <HAL_DMA_GetState>
 8003604:	4603      	mov	r3, r0
 8003606:	2b01      	cmp	r3, #1
 8003608:	d017      	beq.n	800363a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360e:	4a14      	ldr	r2, [pc, #80]	; (8003660 <I2C_ITError+0x19c>)
 8003610:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff f8df 	bl	80027e2 <HAL_DMA_Abort_IT>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d011      	beq.n	800364e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003634:	4610      	mov	r0, r2
 8003636:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003638:	e009      	b.n	800364e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f812 	bl	8003664 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003640:	e005      	b.n	800364e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f80e 	bl	8003664 <I2C_TreatErrorCallback>
  }
}
 8003648:	e002      	b.n	8003650 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800364a:	bf00      	nop
 800364c:	e000      	b.n	8003650 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800364e:	bf00      	nop
}
 8003650:	bf00      	nop
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	ffff0000 	.word	0xffff0000
 800365c:	08002e39 	.word	0x08002e39
 8003660:	080036fb 	.word	0x080036fb

08003664 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b60      	cmp	r3, #96	; 0x60
 8003676:	d10e      	bne.n	8003696 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff fbc8 	bl	8002e24 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003694:	e009      	b.n	80036aa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff fbb3 	bl	8002e10 <HAL_I2C_ErrorCallback>
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d103      	bne.n	80036d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2200      	movs	r2, #0
 80036ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d007      	beq.n	80036ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699a      	ldr	r2, [r3, #24]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0201 	orr.w	r2, r2, #1
 80036ec:	619a      	str	r2, [r3, #24]
  }
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b084      	sub	sp, #16
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003706:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	2200      	movs	r2, #0
 8003716:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003724:	2200      	movs	r2, #0
 8003726:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f7ff ff9b 	bl	8003664 <I2C_TreatErrorCallback>
}
 800372e:	bf00      	nop
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003736:	b480      	push	{r7}
 8003738:	b085      	sub	sp, #20
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	460b      	mov	r3, r1
 8003740:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003746:	887b      	ldrh	r3, [r7, #2]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00f      	beq.n	8003770 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003756:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800375e:	b2db      	uxtb	r3, r3
 8003760:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003764:	2b28      	cmp	r3, #40	; 0x28
 8003766:	d003      	beq.n	8003770 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800376e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003770:	887b      	ldrh	r3, [r7, #2]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00f      	beq.n	800379a <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003780:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003788:	b2db      	uxtb	r3, r3
 800378a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800378e:	2b28      	cmp	r3, #40	; 0x28
 8003790:	d003      	beq.n	800379a <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003798:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800379a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	da03      	bge.n	80037aa <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80037a8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80037aa:	887b      	ldrh	r3, [r7, #2]
 80037ac:	2b10      	cmp	r3, #16
 80037ae:	d103      	bne.n	80037b8 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80037b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80037b8:	887b      	ldrh	r3, [r7, #2]
 80037ba:	2b20      	cmp	r3, #32
 80037bc:	d103      	bne.n	80037c6 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f043 0320 	orr.w	r3, r3, #32
 80037c4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80037c6:	887b      	ldrh	r3, [r7, #2]
 80037c8:	2b40      	cmp	r3, #64	; 0x40
 80037ca:	d103      	bne.n	80037d4 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037d2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6819      	ldr	r1, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	43da      	mvns	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	400a      	ands	r2, r1
 80037e4:	601a      	str	r2, [r3, #0]
}
 80037e6:	bf00      	nop
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b20      	cmp	r3, #32
 8003806:	d138      	bne.n	800387a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800380e:	2b01      	cmp	r3, #1
 8003810:	d101      	bne.n	8003816 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003812:	2302      	movs	r3, #2
 8003814:	e032      	b.n	800387c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2224      	movs	r2, #36	; 0x24
 8003822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0201 	bic.w	r2, r2, #1
 8003834:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003844:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6819      	ldr	r1, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 0201 	orr.w	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003876:	2300      	movs	r3, #0
 8003878:	e000      	b.n	800387c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800387a:	2302      	movs	r3, #2
  }
}
 800387c:	4618      	mov	r0, r3
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b20      	cmp	r3, #32
 800389c:	d139      	bne.n	8003912 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e033      	b.n	8003914 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2224      	movs	r2, #36	; 0x24
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0201 	bic.w	r2, r2, #1
 80038ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	021b      	lsls	r3, r3, #8
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f042 0201 	orr.w	r2, r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	e000      	b.n	8003914 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003912:	2302      	movs	r3, #2
  }
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e082      	b.n	8003a38 <HAL_LPTIM_Init+0x118>
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <HAL_LPTIM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7fc fe28 	bl	800059c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	60fb      	str	r3, [r7, #12]

  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d103      	bne.n	800396c <HAL_LPTIM_Init+0x4c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0306 	bic.w	r3, r3, #6
 800396a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003974:	4293      	cmp	r3, r2
 8003976:	d003      	beq.n	8003980 <HAL_LPTIM_Init+0x60>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRIGSEL));
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800397e:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d103      	bne.n	8003990 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_CKFLT));
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 03d8 	bic.w	r3, r3, #216	; 0xd8
 800398e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4b2b      	ldr	r3, [pc, #172]	; (8003a40 <HAL_LPTIM_Init+0x120>)
 8003994:	4013      	ands	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80039a0:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80039a6:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80039ac:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80039b2:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d107      	bne.n	80039d2 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80039ca:	4313      	orrs	r3, r2
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the active edge or edges used by the counter only if LPTIM is
   * clocked by an external clock source
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d104      	bne.n	80039e4 <HAL_LPTIM_Init+0xc4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]
  }

  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d007      	beq.n	8003a00 <HAL_LPTIM_Init+0xe0>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 80039f8:	4313      	orrs	r3, r2
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a0d      	ldr	r2, [pc, #52]	; (8003a44 <HAL_LPTIM_Init+0x124>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d108      	bne.n	8003a24 <HAL_LPTIM_Init+0x104>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	621a      	str	r2, [r3, #32]
 8003a22:	e004      	b.n	8003a2e <HAL_LPTIM_Init+0x10e>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a2c:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	ff19f1f8 	.word	0xff19f1f8
 8003a44:	40007c00 	.word	0x40007c00

08003a48 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d10d      	bne.n	8003a7a <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d106      	bne.n	8003a7a <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2201      	movs	r2, #1
 8003a72:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f882 	bl	8003b7e <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d10d      	bne.n	8003aa4 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d106      	bne.n	8003aa4 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f877 	bl	8003b92 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0304 	and.w	r3, r3, #4
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d10d      	bne.n	8003ace <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d106      	bne.n	8003ace <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f86c 	bl	8003ba6 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d10d      	bne.n	8003af8 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d106      	bne.n	8003af8 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2208      	movs	r2, #8
 8003af0:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f861 	bl	8003bba <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0310 	and.w	r3, r3, #16
 8003b02:	2b10      	cmp	r3, #16
 8003b04:	d10d      	bne.n	8003b22 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 0310 	and.w	r3, r3, #16
 8003b10:	2b10      	cmp	r3, #16
 8003b12:	d106      	bne.n	8003b22 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2210      	movs	r2, #16
 8003b1a:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f856 	bl	8003bce <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d10d      	bne.n	8003b4c <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	2b20      	cmp	r3, #32
 8003b3c:	d106      	bne.n	8003b4c <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2220      	movs	r2, #32
 8003b44:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f84b 	bl	8003be2 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b56:	2b40      	cmp	r3, #64	; 0x40
 8003b58:	d10d      	bne.n	8003b76 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b64:	2b40      	cmp	r3, #64	; 0x40
 8003b66:	d106      	bne.n	8003b76 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2240      	movs	r2, #64	; 0x40
 8003b6e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f840 	bl	8003bf6 <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8003b76:	bf00      	nop
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
	...

08003c0c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c10:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a04      	ldr	r2, [pc, #16]	; (8003c28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1a:	6013      	str	r3, [r2, #0]
}
 8003c1c:	bf00      	nop
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40007000 	.word	0x40007000

08003c2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c30:	4b04      	ldr	r3, [pc, #16]	; (8003c44 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40007000 	.word	0x40007000

08003c48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c56:	d130      	bne.n	8003cba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c58:	4b23      	ldr	r3, [pc, #140]	; (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c64:	d038      	beq.n	8003cd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c66:	4b20      	ldr	r3, [pc, #128]	; (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c76:	4b1d      	ldr	r3, [pc, #116]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2232      	movs	r2, #50	; 0x32
 8003c7c:	fb02 f303 	mul.w	r3, r2, r3
 8003c80:	4a1b      	ldr	r2, [pc, #108]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	0c9b      	lsrs	r3, r3, #18
 8003c88:	3301      	adds	r3, #1
 8003c8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c8c:	e002      	b.n	8003c94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3b01      	subs	r3, #1
 8003c92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c94:	4b14      	ldr	r3, [pc, #80]	; (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca0:	d102      	bne.n	8003ca8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1f2      	bne.n	8003c8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ca8:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb4:	d110      	bne.n	8003cd8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e00f      	b.n	8003cda <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cba:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc6:	d007      	beq.n	8003cd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cc8:	4b07      	ldr	r3, [pc, #28]	; (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cd0:	4a05      	ldr	r2, [pc, #20]	; (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cd6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40007000 	.word	0x40007000
 8003cec:	20000000 	.word	0x20000000
 8003cf0:	431bde83 	.word	0x431bde83

08003cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d102      	bne.n	8003d08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	f000 bc11 	b.w	800452a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d08:	4ba0      	ldr	r3, [pc, #640]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 030c 	and.w	r3, r3, #12
 8003d10:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d12:	4b9e      	ldr	r3, [pc, #632]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0310 	and.w	r3, r3, #16
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80e4 	beq.w	8003ef2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d007      	beq.n	8003d40 <HAL_RCC_OscConfig+0x4c>
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	2b0c      	cmp	r3, #12
 8003d34:	f040 808b 	bne.w	8003e4e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	f040 8087 	bne.w	8003e4e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d40:	4b92      	ldr	r3, [pc, #584]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <HAL_RCC_OscConfig+0x64>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e3e8      	b.n	800452a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a1a      	ldr	r2, [r3, #32]
 8003d5c:	4b8b      	ldr	r3, [pc, #556]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0308 	and.w	r3, r3, #8
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d004      	beq.n	8003d72 <HAL_RCC_OscConfig+0x7e>
 8003d68:	4b88      	ldr	r3, [pc, #544]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d70:	e005      	b.n	8003d7e <HAL_RCC_OscConfig+0x8a>
 8003d72:	4b86      	ldr	r3, [pc, #536]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d78:	091b      	lsrs	r3, r3, #4
 8003d7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d223      	bcs.n	8003dca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fd40 	bl	800480c <RCC_SetFlashLatencyFromMSIRange>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e3c9      	b.n	800452a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d96:	4b7d      	ldr	r3, [pc, #500]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a7c      	ldr	r2, [pc, #496]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003d9c:	f043 0308 	orr.w	r3, r3, #8
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	4b7a      	ldr	r3, [pc, #488]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	4977      	ldr	r1, [pc, #476]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003db4:	4b75      	ldr	r3, [pc, #468]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	021b      	lsls	r3, r3, #8
 8003dc2:	4972      	ldr	r1, [pc, #456]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	604b      	str	r3, [r1, #4]
 8003dc8:	e025      	b.n	8003e16 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dca:	4b70      	ldr	r3, [pc, #448]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a6f      	ldr	r2, [pc, #444]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003dd0:	f043 0308 	orr.w	r3, r3, #8
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	4b6d      	ldr	r3, [pc, #436]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	496a      	ldr	r1, [pc, #424]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003de8:	4b68      	ldr	r3, [pc, #416]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	021b      	lsls	r3, r3, #8
 8003df6:	4965      	ldr	r1, [pc, #404]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d109      	bne.n	8003e16 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 fd00 	bl	800480c <RCC_SetFlashLatencyFromMSIRange>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e389      	b.n	800452a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e16:	f000 fc6f 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 8003e1a:	4601      	mov	r1, r0
 8003e1c:	4b5b      	ldr	r3, [pc, #364]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	091b      	lsrs	r3, r3, #4
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	4a5a      	ldr	r2, [pc, #360]	; (8003f90 <HAL_RCC_OscConfig+0x29c>)
 8003e28:	5cd3      	ldrb	r3, [r2, r3]
 8003e2a:	f003 031f 	and.w	r3, r3, #31
 8003e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8003e32:	4a58      	ldr	r2, [pc, #352]	; (8003f94 <HAL_RCC_OscConfig+0x2a0>)
 8003e34:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e36:	4b58      	ldr	r3, [pc, #352]	; (8003f98 <HAL_RCC_OscConfig+0x2a4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fd f8dc 	bl	8000ff8 <HAL_InitTick>
 8003e40:	4603      	mov	r3, r0
 8003e42:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d052      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
 8003e4c:	e36d      	b.n	800452a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d032      	beq.n	8003ebc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e56:	4b4d      	ldr	r3, [pc, #308]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a4c      	ldr	r2, [pc, #304]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e62:	f7fd f919 	bl	8001098 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e6a:	f7fd f915 	bl	8001098 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e356      	b.n	800452a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e7c:	4b43      	ldr	r3, [pc, #268]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0f0      	beq.n	8003e6a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e88:	4b40      	ldr	r3, [pc, #256]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a3f      	ldr	r2, [pc, #252]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003e8e:	f043 0308 	orr.w	r3, r3, #8
 8003e92:	6013      	str	r3, [r2, #0]
 8003e94:	4b3d      	ldr	r3, [pc, #244]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	493a      	ldr	r1, [pc, #232]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ea6:	4b39      	ldr	r3, [pc, #228]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	4935      	ldr	r1, [pc, #212]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	604b      	str	r3, [r1, #4]
 8003eba:	e01a      	b.n	8003ef2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ebc:	4b33      	ldr	r3, [pc, #204]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a32      	ldr	r2, [pc, #200]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003ec2:	f023 0301 	bic.w	r3, r3, #1
 8003ec6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ec8:	f7fd f8e6 	bl	8001098 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ed0:	f7fd f8e2 	bl	8001098 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e323      	b.n	800452a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ee2:	4b2a      	ldr	r3, [pc, #168]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x1dc>
 8003eee:	e000      	b.n	8003ef2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ef0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d073      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d005      	beq.n	8003f10 <HAL_RCC_OscConfig+0x21c>
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	2b0c      	cmp	r3, #12
 8003f08:	d10e      	bne.n	8003f28 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d10b      	bne.n	8003f28 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f10:	4b1e      	ldr	r3, [pc, #120]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d063      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x2f0>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d15f      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e300      	b.n	800452a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f30:	d106      	bne.n	8003f40 <HAL_RCC_OscConfig+0x24c>
 8003f32:	4b16      	ldr	r3, [pc, #88]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a15      	ldr	r2, [pc, #84]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	e01d      	b.n	8003f7c <HAL_RCC_OscConfig+0x288>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f48:	d10c      	bne.n	8003f64 <HAL_RCC_OscConfig+0x270>
 8003f4a:	4b10      	ldr	r3, [pc, #64]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a0f      	ldr	r2, [pc, #60]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	4b0d      	ldr	r3, [pc, #52]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a0c      	ldr	r2, [pc, #48]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	e00b      	b.n	8003f7c <HAL_RCC_OscConfig+0x288>
 8003f64:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a08      	ldr	r2, [pc, #32]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a05      	ldr	r2, [pc, #20]	; (8003f8c <HAL_RCC_OscConfig+0x298>)
 8003f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d01b      	beq.n	8003fbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f84:	f7fd f888 	bl	8001098 <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f8a:	e010      	b.n	8003fae <HAL_RCC_OscConfig+0x2ba>
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	08006a28 	.word	0x08006a28
 8003f94:	20000000 	.word	0x20000000
 8003f98:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f9c:	f7fd f87c 	bl	8001098 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b64      	cmp	r3, #100	; 0x64
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e2bd      	b.n	800452a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fae:	4baf      	ldr	r3, [pc, #700]	; (800426c <HAL_RCC_OscConfig+0x578>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f0      	beq.n	8003f9c <HAL_RCC_OscConfig+0x2a8>
 8003fba:	e014      	b.n	8003fe6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fbc:	f7fd f86c 	bl	8001098 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fc4:	f7fd f868 	bl	8001098 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b64      	cmp	r3, #100	; 0x64
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e2a9      	b.n	800452a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fd6:	4ba5      	ldr	r3, [pc, #660]	; (800426c <HAL_RCC_OscConfig+0x578>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f0      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x2d0>
 8003fe2:	e000      	b.n	8003fe6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d060      	beq.n	80040b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d005      	beq.n	8004004 <HAL_RCC_OscConfig+0x310>
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	2b0c      	cmp	r3, #12
 8003ffc:	d119      	bne.n	8004032 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2b02      	cmp	r3, #2
 8004002:	d116      	bne.n	8004032 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004004:	4b99      	ldr	r3, [pc, #612]	; (800426c <HAL_RCC_OscConfig+0x578>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_RCC_OscConfig+0x328>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e286      	b.n	800452a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800401c:	4b93      	ldr	r3, [pc, #588]	; (800426c <HAL_RCC_OscConfig+0x578>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	061b      	lsls	r3, r3, #24
 800402a:	4990      	ldr	r1, [pc, #576]	; (800426c <HAL_RCC_OscConfig+0x578>)
 800402c:	4313      	orrs	r3, r2
 800402e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004030:	e040      	b.n	80040b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d023      	beq.n	8004082 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800403a:	4b8c      	ldr	r3, [pc, #560]	; (800426c <HAL_RCC_OscConfig+0x578>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a8b      	ldr	r2, [pc, #556]	; (800426c <HAL_RCC_OscConfig+0x578>)
 8004040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004046:	f7fd f827 	bl	8001098 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800404e:	f7fd f823 	bl	8001098 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e264      	b.n	800452a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004060:	4b82      	ldr	r3, [pc, #520]	; (800426c <HAL_RCC_OscConfig+0x578>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0f0      	beq.n	800404e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406c:	4b7f      	ldr	r3, [pc, #508]	; (800426c <HAL_RCC_OscConfig+0x578>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	061b      	lsls	r3, r3, #24
 800407a:	497c      	ldr	r1, [pc, #496]	; (800426c <HAL_RCC_OscConfig+0x578>)
 800407c:	4313      	orrs	r3, r2
 800407e:	604b      	str	r3, [r1, #4]
 8004080:	e018      	b.n	80040b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004082:	4b7a      	ldr	r3, [pc, #488]	; (800426c <HAL_RCC_OscConfig+0x578>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a79      	ldr	r2, [pc, #484]	; (800426c <HAL_RCC_OscConfig+0x578>)
 8004088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800408c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408e:	f7fd f803 	bl	8001098 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004096:	f7fc ffff 	bl	8001098 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e240      	b.n	800452a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040a8:	4b70      	ldr	r3, [pc, #448]	; (800426c <HAL_RCC_OscConfig+0x578>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1f0      	bne.n	8004096 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d03c      	beq.n	800413a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01c      	beq.n	8004102 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040c8:	4b68      	ldr	r3, [pc, #416]	; (800426c <HAL_RCC_OscConfig+0x578>)
 80040ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ce:	4a67      	ldr	r2, [pc, #412]	; (800426c <HAL_RCC_OscConfig+0x578>)
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d8:	f7fc ffde 	bl	8001098 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040e0:	f7fc ffda 	bl	8001098 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e21b      	b.n	800452a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040f2:	4b5e      	ldr	r3, [pc, #376]	; (800426c <HAL_RCC_OscConfig+0x578>)
 80040f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0ef      	beq.n	80040e0 <HAL_RCC_OscConfig+0x3ec>
 8004100:	e01b      	b.n	800413a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004102:	4b5a      	ldr	r3, [pc, #360]	; (800426c <HAL_RCC_OscConfig+0x578>)
 8004104:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004108:	4a58      	ldr	r2, [pc, #352]	; (800426c <HAL_RCC_OscConfig+0x578>)
 800410a:	f023 0301 	bic.w	r3, r3, #1
 800410e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004112:	f7fc ffc1 	bl	8001098 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800411a:	f7fc ffbd 	bl	8001098 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e1fe      	b.n	800452a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800412c:	4b4f      	ldr	r3, [pc, #316]	; (800426c <HAL_RCC_OscConfig+0x578>)
 800412e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1ef      	bne.n	800411a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0304 	and.w	r3, r3, #4
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 80a6 	beq.w	8004294 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004148:	2300      	movs	r3, #0
 800414a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800414c:	4b47      	ldr	r3, [pc, #284]	; (800426c <HAL_RCC_OscConfig+0x578>)
 800414e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10d      	bne.n	8004174 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004158:	4b44      	ldr	r3, [pc, #272]	; (800426c <HAL_RCC_OscConfig+0x578>)
 800415a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415c:	4a43      	ldr	r2, [pc, #268]	; (800426c <HAL_RCC_OscConfig+0x578>)
 800415e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004162:	6593      	str	r3, [r2, #88]	; 0x58
 8004164:	4b41      	ldr	r3, [pc, #260]	; (800426c <HAL_RCC_OscConfig+0x578>)
 8004166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416c:	60bb      	str	r3, [r7, #8]
 800416e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004170:	2301      	movs	r3, #1
 8004172:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004174:	4b3e      	ldr	r3, [pc, #248]	; (8004270 <HAL_RCC_OscConfig+0x57c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417c:	2b00      	cmp	r3, #0
 800417e:	d118      	bne.n	80041b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004180:	4b3b      	ldr	r3, [pc, #236]	; (8004270 <HAL_RCC_OscConfig+0x57c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a3a      	ldr	r2, [pc, #232]	; (8004270 <HAL_RCC_OscConfig+0x57c>)
 8004186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800418a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800418c:	f7fc ff84 	bl	8001098 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004194:	f7fc ff80 	bl	8001098 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e1c1      	b.n	800452a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041a6:	4b32      	ldr	r3, [pc, #200]	; (8004270 <HAL_RCC_OscConfig+0x57c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0f0      	beq.n	8004194 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d108      	bne.n	80041cc <HAL_RCC_OscConfig+0x4d8>
 80041ba:	4b2c      	ldr	r3, [pc, #176]	; (800426c <HAL_RCC_OscConfig+0x578>)
 80041bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c0:	4a2a      	ldr	r2, [pc, #168]	; (800426c <HAL_RCC_OscConfig+0x578>)
 80041c2:	f043 0301 	orr.w	r3, r3, #1
 80041c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041ca:	e024      	b.n	8004216 <HAL_RCC_OscConfig+0x522>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	2b05      	cmp	r3, #5
 80041d2:	d110      	bne.n	80041f6 <HAL_RCC_OscConfig+0x502>
 80041d4:	4b25      	ldr	r3, [pc, #148]	; (800426c <HAL_RCC_OscConfig+0x578>)
 80041d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041da:	4a24      	ldr	r2, [pc, #144]	; (800426c <HAL_RCC_OscConfig+0x578>)
 80041dc:	f043 0304 	orr.w	r3, r3, #4
 80041e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041e4:	4b21      	ldr	r3, [pc, #132]	; (800426c <HAL_RCC_OscConfig+0x578>)
 80041e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ea:	4a20      	ldr	r2, [pc, #128]	; (800426c <HAL_RCC_OscConfig+0x578>)
 80041ec:	f043 0301 	orr.w	r3, r3, #1
 80041f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041f4:	e00f      	b.n	8004216 <HAL_RCC_OscConfig+0x522>
 80041f6:	4b1d      	ldr	r3, [pc, #116]	; (800426c <HAL_RCC_OscConfig+0x578>)
 80041f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fc:	4a1b      	ldr	r2, [pc, #108]	; (800426c <HAL_RCC_OscConfig+0x578>)
 80041fe:	f023 0301 	bic.w	r3, r3, #1
 8004202:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004206:	4b19      	ldr	r3, [pc, #100]	; (800426c <HAL_RCC_OscConfig+0x578>)
 8004208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420c:	4a17      	ldr	r2, [pc, #92]	; (800426c <HAL_RCC_OscConfig+0x578>)
 800420e:	f023 0304 	bic.w	r3, r3, #4
 8004212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d016      	beq.n	800424c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421e:	f7fc ff3b 	bl	8001098 <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004224:	e00a      	b.n	800423c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004226:	f7fc ff37 	bl	8001098 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	f241 3288 	movw	r2, #5000	; 0x1388
 8004234:	4293      	cmp	r3, r2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e176      	b.n	800452a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800423c:	4b0b      	ldr	r3, [pc, #44]	; (800426c <HAL_RCC_OscConfig+0x578>)
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0ed      	beq.n	8004226 <HAL_RCC_OscConfig+0x532>
 800424a:	e01a      	b.n	8004282 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424c:	f7fc ff24 	bl	8001098 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004252:	e00f      	b.n	8004274 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004254:	f7fc ff20 	bl	8001098 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004262:	4293      	cmp	r3, r2
 8004264:	d906      	bls.n	8004274 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e15f      	b.n	800452a <HAL_RCC_OscConfig+0x836>
 800426a:	bf00      	nop
 800426c:	40021000 	.word	0x40021000
 8004270:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004274:	4baa      	ldr	r3, [pc, #680]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e8      	bne.n	8004254 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004282:	7ffb      	ldrb	r3, [r7, #31]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d105      	bne.n	8004294 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004288:	4ba5      	ldr	r3, [pc, #660]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 800428a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428c:	4aa4      	ldr	r2, [pc, #656]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 800428e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004292:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b00      	cmp	r3, #0
 800429e:	d03c      	beq.n	800431a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d01c      	beq.n	80042e2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042a8:	4b9d      	ldr	r3, [pc, #628]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 80042aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042ae:	4a9c      	ldr	r2, [pc, #624]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 80042b0:	f043 0301 	orr.w	r3, r3, #1
 80042b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b8:	f7fc feee 	bl	8001098 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042c0:	f7fc feea 	bl	8001098 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e12b      	b.n	800452a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042d2:	4b93      	ldr	r3, [pc, #588]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 80042d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0ef      	beq.n	80042c0 <HAL_RCC_OscConfig+0x5cc>
 80042e0:	e01b      	b.n	800431a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042e2:	4b8f      	ldr	r3, [pc, #572]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 80042e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042e8:	4a8d      	ldr	r2, [pc, #564]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 80042ea:	f023 0301 	bic.w	r3, r3, #1
 80042ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f2:	f7fc fed1 	bl	8001098 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042fa:	f7fc fecd 	bl	8001098 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e10e      	b.n	800452a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800430c:	4b84      	ldr	r3, [pc, #528]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 800430e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1ef      	bne.n	80042fa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 8102 	beq.w	8004528 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004328:	2b02      	cmp	r3, #2
 800432a:	f040 80c5 	bne.w	80044b8 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800432e:	4b7c      	ldr	r3, [pc, #496]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f003 0203 	and.w	r2, r3, #3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433e:	429a      	cmp	r2, r3
 8004340:	d12c      	bne.n	800439c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	3b01      	subs	r3, #1
 800434e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004350:	429a      	cmp	r2, r3
 8004352:	d123      	bne.n	800439c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004360:	429a      	cmp	r2, r3
 8004362:	d11b      	bne.n	800439c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004370:	429a      	cmp	r2, r3
 8004372:	d113      	bne.n	800439c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437e:	085b      	lsrs	r3, r3, #1
 8004380:	3b01      	subs	r3, #1
 8004382:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004384:	429a      	cmp	r2, r3
 8004386:	d109      	bne.n	800439c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	085b      	lsrs	r3, r3, #1
 8004394:	3b01      	subs	r3, #1
 8004396:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004398:	429a      	cmp	r2, r3
 800439a:	d067      	beq.n	800446c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	2b0c      	cmp	r3, #12
 80043a0:	d062      	beq.n	8004468 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043a2:	4b5f      	ldr	r3, [pc, #380]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e0bb      	b.n	800452a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043b2:	4b5b      	ldr	r3, [pc, #364]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a5a      	ldr	r2, [pc, #360]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 80043b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043bc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043be:	f7fc fe6b 	bl	8001098 <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c6:	f7fc fe67 	bl	8001098 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e0a8      	b.n	800452a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043d8:	4b51      	ldr	r3, [pc, #324]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1f0      	bne.n	80043c6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043e4:	4b4e      	ldr	r3, [pc, #312]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	4b4e      	ldr	r3, [pc, #312]	; (8004524 <HAL_RCC_OscConfig+0x830>)
 80043ea:	4013      	ands	r3, r2
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043f4:	3a01      	subs	r2, #1
 80043f6:	0112      	lsls	r2, r2, #4
 80043f8:	4311      	orrs	r1, r2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043fe:	0212      	lsls	r2, r2, #8
 8004400:	4311      	orrs	r1, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004406:	0852      	lsrs	r2, r2, #1
 8004408:	3a01      	subs	r2, #1
 800440a:	0552      	lsls	r2, r2, #21
 800440c:	4311      	orrs	r1, r2
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004412:	0852      	lsrs	r2, r2, #1
 8004414:	3a01      	subs	r2, #1
 8004416:	0652      	lsls	r2, r2, #25
 8004418:	4311      	orrs	r1, r2
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800441e:	06d2      	lsls	r2, r2, #27
 8004420:	430a      	orrs	r2, r1
 8004422:	493f      	ldr	r1, [pc, #252]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 8004424:	4313      	orrs	r3, r2
 8004426:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004428:	4b3d      	ldr	r3, [pc, #244]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a3c      	ldr	r2, [pc, #240]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 800442e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004432:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004434:	4b3a      	ldr	r3, [pc, #232]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	4a39      	ldr	r2, [pc, #228]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 800443a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800443e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004440:	f7fc fe2a 	bl	8001098 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004448:	f7fc fe26 	bl	8001098 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e067      	b.n	800452a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800445a:	4b31      	ldr	r3, [pc, #196]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f0      	beq.n	8004448 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004466:	e05f      	b.n	8004528 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e05e      	b.n	800452a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800446c:	4b2c      	ldr	r3, [pc, #176]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d157      	bne.n	8004528 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004478:	4b29      	ldr	r3, [pc, #164]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a28      	ldr	r2, [pc, #160]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 800447e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004482:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004484:	4b26      	ldr	r3, [pc, #152]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	4a25      	ldr	r2, [pc, #148]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 800448a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800448e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004490:	f7fc fe02 	bl	8001098 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004498:	f7fc fdfe 	bl	8001098 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e03f      	b.n	800452a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044aa:	4b1d      	ldr	r3, [pc, #116]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0f0      	beq.n	8004498 <HAL_RCC_OscConfig+0x7a4>
 80044b6:	e037      	b.n	8004528 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	2b0c      	cmp	r3, #12
 80044bc:	d02d      	beq.n	800451a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044be:	4b18      	ldr	r3, [pc, #96]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a17      	ldr	r2, [pc, #92]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 80044c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044c8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044ca:	4b15      	ldr	r3, [pc, #84]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d105      	bne.n	80044e2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80044d6:	4b12      	ldr	r3, [pc, #72]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	4a11      	ldr	r2, [pc, #68]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 80044dc:	f023 0303 	bic.w	r3, r3, #3
 80044e0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80044e2:	4b0f      	ldr	r3, [pc, #60]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	4a0e      	ldr	r2, [pc, #56]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 80044e8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80044ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f2:	f7fc fdd1 	bl	8001098 <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044f8:	e008      	b.n	800450c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044fa:	f7fc fdcd 	bl	8001098 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e00e      	b.n	800452a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800450c:	4b04      	ldr	r3, [pc, #16]	; (8004520 <HAL_RCC_OscConfig+0x82c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1f0      	bne.n	80044fa <HAL_RCC_OscConfig+0x806>
 8004518:	e006      	b.n	8004528 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e005      	b.n	800452a <HAL_RCC_OscConfig+0x836>
 800451e:	bf00      	nop
 8004520:	40021000 	.word	0x40021000
 8004524:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3720      	adds	r7, #32
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop

08004534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e0c8      	b.n	80046da <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004548:	4b66      	ldr	r3, [pc, #408]	; (80046e4 <HAL_RCC_ClockConfig+0x1b0>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d910      	bls.n	8004578 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004556:	4b63      	ldr	r3, [pc, #396]	; (80046e4 <HAL_RCC_ClockConfig+0x1b0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f023 0207 	bic.w	r2, r3, #7
 800455e:	4961      	ldr	r1, [pc, #388]	; (80046e4 <HAL_RCC_ClockConfig+0x1b0>)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	4313      	orrs	r3, r2
 8004564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004566:	4b5f      	ldr	r3, [pc, #380]	; (80046e4 <HAL_RCC_ClockConfig+0x1b0>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d001      	beq.n	8004578 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e0b0      	b.n	80046da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d04c      	beq.n	800461e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b03      	cmp	r3, #3
 800458a:	d107      	bne.n	800459c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800458c:	4b56      	ldr	r3, [pc, #344]	; (80046e8 <HAL_RCC_ClockConfig+0x1b4>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d121      	bne.n	80045dc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e09e      	b.n	80046da <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d107      	bne.n	80045b4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045a4:	4b50      	ldr	r3, [pc, #320]	; (80046e8 <HAL_RCC_ClockConfig+0x1b4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d115      	bne.n	80045dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e092      	b.n	80046da <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d107      	bne.n	80045cc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045bc:	4b4a      	ldr	r3, [pc, #296]	; (80046e8 <HAL_RCC_ClockConfig+0x1b4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d109      	bne.n	80045dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e086      	b.n	80046da <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045cc:	4b46      	ldr	r3, [pc, #280]	; (80046e8 <HAL_RCC_ClockConfig+0x1b4>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e07e      	b.n	80046da <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045dc:	4b42      	ldr	r3, [pc, #264]	; (80046e8 <HAL_RCC_ClockConfig+0x1b4>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f023 0203 	bic.w	r2, r3, #3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	493f      	ldr	r1, [pc, #252]	; (80046e8 <HAL_RCC_ClockConfig+0x1b4>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ee:	f7fc fd53 	bl	8001098 <HAL_GetTick>
 80045f2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f4:	e00a      	b.n	800460c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f6:	f7fc fd4f 	bl	8001098 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	f241 3288 	movw	r2, #5000	; 0x1388
 8004604:	4293      	cmp	r3, r2
 8004606:	d901      	bls.n	800460c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e066      	b.n	80046da <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800460c:	4b36      	ldr	r3, [pc, #216]	; (80046e8 <HAL_RCC_ClockConfig+0x1b4>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f003 020c 	and.w	r2, r3, #12
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	429a      	cmp	r2, r3
 800461c:	d1eb      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d008      	beq.n	800463c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800462a:	4b2f      	ldr	r3, [pc, #188]	; (80046e8 <HAL_RCC_ClockConfig+0x1b4>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	492c      	ldr	r1, [pc, #176]	; (80046e8 <HAL_RCC_ClockConfig+0x1b4>)
 8004638:	4313      	orrs	r3, r2
 800463a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800463c:	4b29      	ldr	r3, [pc, #164]	; (80046e4 <HAL_RCC_ClockConfig+0x1b0>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0307 	and.w	r3, r3, #7
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d210      	bcs.n	800466c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464a:	4b26      	ldr	r3, [pc, #152]	; (80046e4 <HAL_RCC_ClockConfig+0x1b0>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f023 0207 	bic.w	r2, r3, #7
 8004652:	4924      	ldr	r1, [pc, #144]	; (80046e4 <HAL_RCC_ClockConfig+0x1b0>)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	4313      	orrs	r3, r2
 8004658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800465a:	4b22      	ldr	r3, [pc, #136]	; (80046e4 <HAL_RCC_ClockConfig+0x1b0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d001      	beq.n	800466c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e036      	b.n	80046da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004678:	4b1b      	ldr	r3, [pc, #108]	; (80046e8 <HAL_RCC_ClockConfig+0x1b4>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	4918      	ldr	r1, [pc, #96]	; (80046e8 <HAL_RCC_ClockConfig+0x1b4>)
 8004686:	4313      	orrs	r3, r2
 8004688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004696:	4b14      	ldr	r3, [pc, #80]	; (80046e8 <HAL_RCC_ClockConfig+0x1b4>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4910      	ldr	r1, [pc, #64]	; (80046e8 <HAL_RCC_ClockConfig+0x1b4>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046aa:	f000 f825 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 80046ae:	4601      	mov	r1, r0
 80046b0:	4b0d      	ldr	r3, [pc, #52]	; (80046e8 <HAL_RCC_ClockConfig+0x1b4>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	4a0c      	ldr	r2, [pc, #48]	; (80046ec <HAL_RCC_ClockConfig+0x1b8>)
 80046bc:	5cd3      	ldrb	r3, [r2, r3]
 80046be:	f003 031f 	and.w	r3, r3, #31
 80046c2:	fa21 f303 	lsr.w	r3, r1, r3
 80046c6:	4a0a      	ldr	r2, [pc, #40]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80046c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046ca:	4b0a      	ldr	r3, [pc, #40]	; (80046f4 <HAL_RCC_ClockConfig+0x1c0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fc fc92 	bl	8000ff8 <HAL_InitTick>
 80046d4:	4603      	mov	r3, r0
 80046d6:	72fb      	strb	r3, [r7, #11]

  return status;
 80046d8:	7afb      	ldrb	r3, [r7, #11]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40022000 	.word	0x40022000
 80046e8:	40021000 	.word	0x40021000
 80046ec:	08006a28 	.word	0x08006a28
 80046f0:	20000000 	.word	0x20000000
 80046f4:	20000004 	.word	0x20000004

080046f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b089      	sub	sp, #36	; 0x24
 80046fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	61fb      	str	r3, [r7, #28]
 8004702:	2300      	movs	r3, #0
 8004704:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004706:	4b3d      	ldr	r3, [pc, #244]	; (80047fc <HAL_RCC_GetSysClockFreq+0x104>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
 800470e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004710:	4b3a      	ldr	r3, [pc, #232]	; (80047fc <HAL_RCC_GetSysClockFreq+0x104>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0303 	and.w	r3, r3, #3
 8004718:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <HAL_RCC_GetSysClockFreq+0x34>
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	2b0c      	cmp	r3, #12
 8004724:	d121      	bne.n	800476a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d11e      	bne.n	800476a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800472c:	4b33      	ldr	r3, [pc, #204]	; (80047fc <HAL_RCC_GetSysClockFreq+0x104>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0308 	and.w	r3, r3, #8
 8004734:	2b00      	cmp	r3, #0
 8004736:	d107      	bne.n	8004748 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004738:	4b30      	ldr	r3, [pc, #192]	; (80047fc <HAL_RCC_GetSysClockFreq+0x104>)
 800473a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800473e:	0a1b      	lsrs	r3, r3, #8
 8004740:	f003 030f 	and.w	r3, r3, #15
 8004744:	61fb      	str	r3, [r7, #28]
 8004746:	e005      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004748:	4b2c      	ldr	r3, [pc, #176]	; (80047fc <HAL_RCC_GetSysClockFreq+0x104>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004754:	4a2a      	ldr	r2, [pc, #168]	; (8004800 <HAL_RCC_GetSysClockFreq+0x108>)
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800475c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10d      	bne.n	8004780 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004768:	e00a      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b04      	cmp	r3, #4
 800476e:	d102      	bne.n	8004776 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004770:	4b24      	ldr	r3, [pc, #144]	; (8004804 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004772:	61bb      	str	r3, [r7, #24]
 8004774:	e004      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	2b08      	cmp	r3, #8
 800477a:	d101      	bne.n	8004780 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800477c:	4b22      	ldr	r3, [pc, #136]	; (8004808 <HAL_RCC_GetSysClockFreq+0x110>)
 800477e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	2b0c      	cmp	r3, #12
 8004784:	d133      	bne.n	80047ee <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004786:	4b1d      	ldr	r3, [pc, #116]	; (80047fc <HAL_RCC_GetSysClockFreq+0x104>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b02      	cmp	r3, #2
 8004794:	d002      	beq.n	800479c <HAL_RCC_GetSysClockFreq+0xa4>
 8004796:	2b03      	cmp	r3, #3
 8004798:	d003      	beq.n	80047a2 <HAL_RCC_GetSysClockFreq+0xaa>
 800479a:	e005      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800479c:	4b19      	ldr	r3, [pc, #100]	; (8004804 <HAL_RCC_GetSysClockFreq+0x10c>)
 800479e:	617b      	str	r3, [r7, #20]
      break;
 80047a0:	e005      	b.n	80047ae <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047a2:	4b19      	ldr	r3, [pc, #100]	; (8004808 <HAL_RCC_GetSysClockFreq+0x110>)
 80047a4:	617b      	str	r3, [r7, #20]
      break;
 80047a6:	e002      	b.n	80047ae <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	617b      	str	r3, [r7, #20]
      break;
 80047ac:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047ae:	4b13      	ldr	r3, [pc, #76]	; (80047fc <HAL_RCC_GetSysClockFreq+0x104>)
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	091b      	lsrs	r3, r3, #4
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	3301      	adds	r3, #1
 80047ba:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047bc:	4b0f      	ldr	r3, [pc, #60]	; (80047fc <HAL_RCC_GetSysClockFreq+0x104>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	0a1b      	lsrs	r3, r3, #8
 80047c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	fb02 f203 	mul.w	r2, r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047d4:	4b09      	ldr	r3, [pc, #36]	; (80047fc <HAL_RCC_GetSysClockFreq+0x104>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	0e5b      	lsrs	r3, r3, #25
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	3301      	adds	r3, #1
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ec:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80047ee:	69bb      	ldr	r3, [r7, #24]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3724      	adds	r7, #36	; 0x24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	40021000 	.word	0x40021000
 8004800:	08006a38 	.word	0x08006a38
 8004804:	00f42400 	.word	0x00f42400
 8004808:	007a1200 	.word	0x007a1200

0800480c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004814:	2300      	movs	r3, #0
 8004816:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004818:	4b2a      	ldr	r3, [pc, #168]	; (80048c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800481a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004824:	f7ff fa02 	bl	8003c2c <HAL_PWREx_GetVoltageRange>
 8004828:	6178      	str	r0, [r7, #20]
 800482a:	e014      	b.n	8004856 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800482c:	4b25      	ldr	r3, [pc, #148]	; (80048c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800482e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004830:	4a24      	ldr	r2, [pc, #144]	; (80048c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004836:	6593      	str	r3, [r2, #88]	; 0x58
 8004838:	4b22      	ldr	r3, [pc, #136]	; (80048c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800483a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004844:	f7ff f9f2 	bl	8003c2c <HAL_PWREx_GetVoltageRange>
 8004848:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800484a:	4b1e      	ldr	r3, [pc, #120]	; (80048c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800484c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484e:	4a1d      	ldr	r2, [pc, #116]	; (80048c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004854:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800485c:	d10b      	bne.n	8004876 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b80      	cmp	r3, #128	; 0x80
 8004862:	d919      	bls.n	8004898 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2ba0      	cmp	r3, #160	; 0xa0
 8004868:	d902      	bls.n	8004870 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800486a:	2302      	movs	r3, #2
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	e013      	b.n	8004898 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004870:	2301      	movs	r3, #1
 8004872:	613b      	str	r3, [r7, #16]
 8004874:	e010      	b.n	8004898 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b80      	cmp	r3, #128	; 0x80
 800487a:	d902      	bls.n	8004882 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800487c:	2303      	movs	r3, #3
 800487e:	613b      	str	r3, [r7, #16]
 8004880:	e00a      	b.n	8004898 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b80      	cmp	r3, #128	; 0x80
 8004886:	d102      	bne.n	800488e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004888:	2302      	movs	r3, #2
 800488a:	613b      	str	r3, [r7, #16]
 800488c:	e004      	b.n	8004898 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b70      	cmp	r3, #112	; 0x70
 8004892:	d101      	bne.n	8004898 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004894:	2301      	movs	r3, #1
 8004896:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004898:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f023 0207 	bic.w	r2, r3, #7
 80048a0:	4909      	ldr	r1, [pc, #36]	; (80048c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048a8:	4b07      	ldr	r3, [pc, #28]	; (80048c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d001      	beq.n	80048ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40021000 	.word	0x40021000
 80048c8:	40022000 	.word	0x40022000

080048cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048d4:	2300      	movs	r3, #0
 80048d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048d8:	2300      	movs	r3, #0
 80048da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d02f      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048f0:	d005      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x32>
 80048f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048f6:	d015      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d007      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x40>
 80048fc:	e00f      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80048fe:	4b5d      	ldr	r3, [pc, #372]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	4a5c      	ldr	r2, [pc, #368]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004908:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800490a:	e00c      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3304      	adds	r3, #4
 8004910:	2100      	movs	r1, #0
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fa54 	bl	8004dc0 <RCCEx_PLLSAI1_Config>
 8004918:	4603      	mov	r3, r0
 800491a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800491c:	e003      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	74fb      	strb	r3, [r7, #19]
      break;
 8004922:	e000      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8004924:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004926:	7cfb      	ldrb	r3, [r7, #19]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10b      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800492c:	4b51      	ldr	r3, [pc, #324]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800492e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004932:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493a:	494e      	ldr	r1, [pc, #312]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004942:	e001      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004944:	7cfb      	ldrb	r3, [r7, #19]
 8004946:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 809e 	beq.w	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004956:	2300      	movs	r3, #0
 8004958:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800495a:	4b46      	ldr	r3, [pc, #280]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800495c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004966:	2301      	movs	r3, #1
 8004968:	e000      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800496a:	2300      	movs	r3, #0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00d      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004970:	4b40      	ldr	r3, [pc, #256]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004974:	4a3f      	ldr	r2, [pc, #252]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800497a:	6593      	str	r3, [r2, #88]	; 0x58
 800497c:	4b3d      	ldr	r3, [pc, #244]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800497e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004984:	60bb      	str	r3, [r7, #8]
 8004986:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004988:	2301      	movs	r3, #1
 800498a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800498c:	4b3a      	ldr	r3, [pc, #232]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a39      	ldr	r2, [pc, #228]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004996:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004998:	f7fc fb7e 	bl	8001098 <HAL_GetTick>
 800499c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800499e:	e009      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a0:	f7fc fb7a 	bl	8001098 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d902      	bls.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	74fb      	strb	r3, [r7, #19]
        break;
 80049b2:	e005      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049b4:	4b30      	ldr	r3, [pc, #192]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0ef      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80049c0:	7cfb      	ldrb	r3, [r7, #19]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d15a      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049c6:	4b2b      	ldr	r3, [pc, #172]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80049c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d01e      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d019      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049e2:	4b24      	ldr	r3, [pc, #144]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80049e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049ee:	4b21      	ldr	r3, [pc, #132]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80049f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f4:	4a1f      	ldr	r2, [pc, #124]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80049f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049fe:	4b1d      	ldr	r3, [pc, #116]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a04:	4a1b      	ldr	r2, [pc, #108]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a0e:	4a19      	ldr	r2, [pc, #100]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d016      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a20:	f7fc fb3a 	bl	8001098 <HAL_GetTick>
 8004a24:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a26:	e00b      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a28:	f7fc fb36 	bl	8001098 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d902      	bls.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	74fb      	strb	r3, [r7, #19]
            break;
 8004a3e:	e006      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a40:	4b0c      	ldr	r3, [pc, #48]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0ec      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8004a4e:	7cfb      	ldrb	r3, [r7, #19]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10b      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a54:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a62:	4904      	ldr	r1, [pc, #16]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a6a:	e009      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a6c:	7cfb      	ldrb	r3, [r7, #19]
 8004a6e:	74bb      	strb	r3, [r7, #18]
 8004a70:	e006      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004a72:	bf00      	nop
 8004a74:	40021000 	.word	0x40021000
 8004a78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7c:	7cfb      	ldrb	r3, [r7, #19]
 8004a7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a80:	7c7b      	ldrb	r3, [r7, #17]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d105      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a86:	4b9e      	ldr	r3, [pc, #632]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8a:	4a9d      	ldr	r2, [pc, #628]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a90:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a9e:	4b98      	ldr	r3, [pc, #608]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa4:	f023 0203 	bic.w	r2, r3, #3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	4994      	ldr	r1, [pc, #592]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ac0:	4b8f      	ldr	r3, [pc, #572]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac6:	f023 020c 	bic.w	r2, r3, #12
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	498c      	ldr	r1, [pc, #560]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ae2:	4b87      	ldr	r3, [pc, #540]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af0:	4983      	ldr	r1, [pc, #524]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b04:	4b7e      	ldr	r3, [pc, #504]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b12:	497b      	ldr	r1, [pc, #492]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b26:	4b76      	ldr	r3, [pc, #472]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b34:	4972      	ldr	r1, [pc, #456]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00a      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b48:	4b6d      	ldr	r3, [pc, #436]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b56:	496a      	ldr	r1, [pc, #424]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b6a:	4b65      	ldr	r3, [pc, #404]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b78:	4961      	ldr	r1, [pc, #388]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00a      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b8c:	4b5c      	ldr	r3, [pc, #368]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9a:	4959      	ldr	r1, [pc, #356]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bae:	4b54      	ldr	r3, [pc, #336]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	4950      	ldr	r1, [pc, #320]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00a      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bd0:	4b4b      	ldr	r3, [pc, #300]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bde:	4948      	ldr	r1, [pc, #288]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bf2:	4b43      	ldr	r3, [pc, #268]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004bf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bf8:	f023 0203 	bic.w	r2, r3, #3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	493f      	ldr	r1, [pc, #252]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d028      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c14:	4b3a      	ldr	r3, [pc, #232]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c22:	4937      	ldr	r1, [pc, #220]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c32:	d106      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c34:	4b32      	ldr	r3, [pc, #200]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	4a31      	ldr	r2, [pc, #196]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004c3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c3e:	60d3      	str	r3, [r2, #12]
 8004c40:	e011      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c4a:	d10c      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	2101      	movs	r1, #1
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 f8b4 	bl	8004dc0 <RCCEx_PLLSAI1_Config>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c5c:	7cfb      	ldrb	r3, [r7, #19]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 8004c62:	7cfb      	ldrb	r3, [r7, #19]
 8004c64:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d028      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c72:	4b23      	ldr	r3, [pc, #140]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c78:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c80:	491f      	ldr	r1, [pc, #124]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c90:	d106      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c92:	4b1b      	ldr	r3, [pc, #108]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	4a1a      	ldr	r2, [pc, #104]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004c98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c9c:	60d3      	str	r3, [r2, #12]
 8004c9e:	e011      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ca8:	d10c      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	3304      	adds	r3, #4
 8004cae:	2101      	movs	r1, #1
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 f885 	bl	8004dc0 <RCCEx_PLLSAI1_Config>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cba:	7cfb      	ldrb	r3, [r7, #19]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8004cc0:	7cfb      	ldrb	r3, [r7, #19]
 8004cc2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d02b      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cd0:	4b0b      	ldr	r3, [pc, #44]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cde:	4908      	ldr	r1, [pc, #32]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cee:	d109      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cf0:	4b03      	ldr	r3, [pc, #12]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	4a02      	ldr	r2, [pc, #8]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004cf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cfa:	60d3      	str	r3, [r2, #12]
 8004cfc:	e014      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8004cfe:	bf00      	nop
 8004d00:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d0c:	d10c      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3304      	adds	r3, #4
 8004d12:	2101      	movs	r1, #1
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 f853 	bl	8004dc0 <RCCEx_PLLSAI1_Config>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d1e:	7cfb      	ldrb	r3, [r7, #19]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8004d24:	7cfb      	ldrb	r3, [r7, #19]
 8004d26:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d01c      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d34:	4b19      	ldr	r3, [pc, #100]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d42:	4916      	ldr	r1, [pc, #88]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d52:	d10c      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3304      	adds	r3, #4
 8004d58:	2102      	movs	r1, #2
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 f830 	bl	8004dc0 <RCCEx_PLLSAI1_Config>
 8004d60:	4603      	mov	r3, r0
 8004d62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d64:	7cfb      	ldrb	r3, [r7, #19]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 8004d6a:	7cfb      	ldrb	r3, [r7, #19]
 8004d6c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d7a:	4b08      	ldr	r3, [pc, #32]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d88:	4904      	ldr	r1, [pc, #16]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d90:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40021000 	.word	0x40021000

08004da0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004da4:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a04      	ldr	r2, [pc, #16]	; (8004dbc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004daa:	f043 0304 	orr.w	r3, r3, #4
 8004dae:	6013      	str	r3, [r2, #0]
}
 8004db0:	bf00      	nop
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40021000 	.word	0x40021000

08004dc0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dce:	4b73      	ldr	r3, [pc, #460]	; (8004f9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d018      	beq.n	8004e0c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004dda:	4b70      	ldr	r3, [pc, #448]	; (8004f9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f003 0203 	and.w	r2, r3, #3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d10d      	bne.n	8004e06 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
       ||
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d009      	beq.n	8004e06 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004df2:	4b6a      	ldr	r3, [pc, #424]	; (8004f9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	091b      	lsrs	r3, r3, #4
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
       ||
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d044      	beq.n	8004e90 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	73fb      	strb	r3, [r7, #15]
 8004e0a:	e041      	b.n	8004e90 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d00c      	beq.n	8004e2e <RCCEx_PLLSAI1_Config+0x6e>
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d013      	beq.n	8004e40 <RCCEx_PLLSAI1_Config+0x80>
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d120      	bne.n	8004e5e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e1c:	4b5f      	ldr	r3, [pc, #380]	; (8004f9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d11d      	bne.n	8004e64 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e2c:	e01a      	b.n	8004e64 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e2e:	4b5b      	ldr	r3, [pc, #364]	; (8004f9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d116      	bne.n	8004e68 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e3e:	e013      	b.n	8004e68 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e40:	4b56      	ldr	r3, [pc, #344]	; (8004f9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10f      	bne.n	8004e6c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e4c:	4b53      	ldr	r3, [pc, #332]	; (8004f9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d109      	bne.n	8004e6c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e5c:	e006      	b.n	8004e6c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	73fb      	strb	r3, [r7, #15]
      break;
 8004e62:	e004      	b.n	8004e6e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004e64:	bf00      	nop
 8004e66:	e002      	b.n	8004e6e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004e68:	bf00      	nop
 8004e6a:	e000      	b.n	8004e6e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004e6c:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10d      	bne.n	8004e90 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e74:	4b49      	ldr	r3, [pc, #292]	; (8004f9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6819      	ldr	r1, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	3b01      	subs	r3, #1
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	430b      	orrs	r3, r1
 8004e8a:	4944      	ldr	r1, [pc, #272]	; (8004f9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d17c      	bne.n	8004f90 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e96:	4b41      	ldr	r3, [pc, #260]	; (8004f9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a40      	ldr	r2, [pc, #256]	; (8004f9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ea0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea2:	f7fc f8f9 	bl	8001098 <HAL_GetTick>
 8004ea6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ea8:	e009      	b.n	8004ebe <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004eaa:	f7fc f8f5 	bl	8001098 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d902      	bls.n	8004ebe <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	73fb      	strb	r3, [r7, #15]
        break;
 8004ebc:	e005      	b.n	8004eca <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ebe:	4b37      	ldr	r3, [pc, #220]	; (8004f9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1ef      	bne.n	8004eaa <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d15f      	bne.n	8004f90 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d110      	bne.n	8004ef8 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ed6:	4b31      	ldr	r3, [pc, #196]	; (8004f9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004ede:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6892      	ldr	r2, [r2, #8]
 8004ee6:	0211      	lsls	r1, r2, #8
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	68d2      	ldr	r2, [r2, #12]
 8004eec:	06d2      	lsls	r2, r2, #27
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	492a      	ldr	r1, [pc, #168]	; (8004f9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	610b      	str	r3, [r1, #16]
 8004ef6:	e027      	b.n	8004f48 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d112      	bne.n	8004f24 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004efe:	4b27      	ldr	r3, [pc, #156]	; (8004f9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004f06:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6892      	ldr	r2, [r2, #8]
 8004f0e:	0211      	lsls	r1, r2, #8
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6912      	ldr	r2, [r2, #16]
 8004f14:	0852      	lsrs	r2, r2, #1
 8004f16:	3a01      	subs	r2, #1
 8004f18:	0552      	lsls	r2, r2, #21
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	491f      	ldr	r1, [pc, #124]	; (8004f9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	610b      	str	r3, [r1, #16]
 8004f22:	e011      	b.n	8004f48 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f24:	4b1d      	ldr	r3, [pc, #116]	; (8004f9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6892      	ldr	r2, [r2, #8]
 8004f34:	0211      	lsls	r1, r2, #8
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6952      	ldr	r2, [r2, #20]
 8004f3a:	0852      	lsrs	r2, r2, #1
 8004f3c:	3a01      	subs	r2, #1
 8004f3e:	0652      	lsls	r2, r2, #25
 8004f40:	430a      	orrs	r2, r1
 8004f42:	4916      	ldr	r1, [pc, #88]	; (8004f9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f48:	4b14      	ldr	r3, [pc, #80]	; (8004f9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a13      	ldr	r2, [pc, #76]	; (8004f9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f54:	f7fc f8a0 	bl	8001098 <HAL_GetTick>
 8004f58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f5a:	e009      	b.n	8004f70 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f5c:	f7fc f89c 	bl	8001098 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d902      	bls.n	8004f70 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	73fb      	strb	r3, [r7, #15]
          break;
 8004f6e:	e005      	b.n	8004f7c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f70:	4b0a      	ldr	r3, [pc, #40]	; (8004f9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0ef      	beq.n	8004f5c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8004f7c:	7bfb      	ldrb	r3, [r7, #15]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f82:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f84:	691a      	ldr	r2, [r3, #16]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	4904      	ldr	r1, [pc, #16]	; (8004f9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40021000 	.word	0x40021000

08004fa0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d06c      	beq.n	800508c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d106      	bne.n	8004fcc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7fb fc8a 	bl	80008e0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	22ca      	movs	r2, #202	; 0xca
 8004fda:	625a      	str	r2, [r3, #36]	; 0x24
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2253      	movs	r2, #83	; 0x53
 8004fe2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f9a0 	bl	800532a <RTC_EnterInitMode>
 8004fea:	4603      	mov	r3, r0
 8004fec:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d14b      	bne.n	800508c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6812      	ldr	r2, [r2, #0]
 8004ffe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005006:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6899      	ldr	r1, [r3, #8]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	431a      	orrs	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	68d2      	ldr	r2, [r2, #12]
 800502e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6919      	ldr	r1, [r3, #16]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	041a      	lsls	r2, r3, #16
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f9a3 	bl	8005390 <RTC_ExitInitMode>
 800504a:	4603      	mov	r3, r0
 800504c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800504e:	7bfb      	ldrb	r3, [r7, #15]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d11b      	bne.n	800508c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0203 	bic.w	r2, r2, #3
 8005062:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69da      	ldr	r2, [r3, #28]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	22ff      	movs	r2, #255	; 0xff
 8005082:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800508c:	7bfb      	ldrb	r3, [r7, #15]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005096:	b590      	push	{r4, r7, lr}
 8005098:	b087      	sub	sp, #28
 800509a:	af00      	add	r7, sp, #0
 800509c:	60f8      	str	r0, [r7, #12]
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_RTC_SetTime+0x1a>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e08b      	b.n	80051c8 <HAL_RTC_SetTime+0x132>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	22ca      	movs	r2, #202	; 0xca
 80050c6:	625a      	str	r2, [r3, #36]	; 0x24
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2253      	movs	r2, #83	; 0x53
 80050ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 f92a 	bl	800532a <RTC_EnterInitMode>
 80050d6:	4603      	mov	r3, r0
 80050d8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80050da:	7cfb      	ldrb	r3, [r7, #19]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d163      	bne.n	80051a8 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d126      	bne.n	8005134 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d102      	bne.n	80050fa <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2200      	movs	r2, #0
 80050f8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 f984 	bl	800540c <RTC_ByteToBcd2>
 8005104:	4603      	mov	r3, r0
 8005106:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	785b      	ldrb	r3, [r3, #1]
 800510c:	4618      	mov	r0, r3
 800510e:	f000 f97d 	bl	800540c <RTC_ByteToBcd2>
 8005112:	4603      	mov	r3, r0
 8005114:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005116:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	789b      	ldrb	r3, [r3, #2]
 800511c:	4618      	mov	r0, r3
 800511e:	f000 f975 	bl	800540c <RTC_ByteToBcd2>
 8005122:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005124:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	78db      	ldrb	r3, [r3, #3]
 800512c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800512e:	4313      	orrs	r3, r2
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	e018      	b.n	8005166 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513e:	2b00      	cmp	r3, #0
 8005140:	d102      	bne.n	8005148 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2200      	movs	r2, #0
 8005146:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	785b      	ldrb	r3, [r3, #1]
 8005152:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005154:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800515a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	78db      	ldrb	r3, [r3, #3]
 8005160:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005162:	4313      	orrs	r3, r2
 8005164:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005170:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005174:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005184:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6899      	ldr	r1, [r3, #8]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	68da      	ldr	r2, [r3, #12]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	431a      	orrs	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 f8f6 	bl	8005390 <RTC_ExitInitMode>
 80051a4:	4603      	mov	r3, r0
 80051a6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	22ff      	movs	r2, #255	; 0xff
 80051ae:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80051b0:	7cfb      	ldrb	r3, [r7, #19]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d103      	bne.n	80051be <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80051c6:	7cfb      	ldrb	r3, [r7, #19]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd90      	pop	{r4, r7, pc}

080051d0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80051d0:	b590      	push	{r4, r7, lr}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d101      	bne.n	80051ea <HAL_RTC_SetDate+0x1a>
 80051e6:	2302      	movs	r3, #2
 80051e8:	e075      	b.n	80052d6 <HAL_RTC_SetDate+0x106>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2202      	movs	r2, #2
 80051f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10e      	bne.n	800521e <HAL_RTC_SetDate+0x4e>
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	785b      	ldrb	r3, [r3, #1]
 8005204:	f003 0310 	and.w	r3, r3, #16
 8005208:	2b00      	cmp	r3, #0
 800520a:	d008      	beq.n	800521e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	785b      	ldrb	r3, [r3, #1]
 8005210:	f023 0310 	bic.w	r3, r3, #16
 8005214:	b2db      	uxtb	r3, r3
 8005216:	330a      	adds	r3, #10
 8005218:	b2da      	uxtb	r2, r3
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d11c      	bne.n	800525e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	78db      	ldrb	r3, [r3, #3]
 8005228:	4618      	mov	r0, r3
 800522a:	f000 f8ef 	bl	800540c <RTC_ByteToBcd2>
 800522e:	4603      	mov	r3, r0
 8005230:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	785b      	ldrb	r3, [r3, #1]
 8005236:	4618      	mov	r0, r3
 8005238:	f000 f8e8 	bl	800540c <RTC_ByteToBcd2>
 800523c:	4603      	mov	r3, r0
 800523e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005240:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	789b      	ldrb	r3, [r3, #2]
 8005246:	4618      	mov	r0, r3
 8005248:	f000 f8e0 	bl	800540c <RTC_ByteToBcd2>
 800524c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800524e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005258:	4313      	orrs	r3, r2
 800525a:	617b      	str	r3, [r7, #20]
 800525c:	e00e      	b.n	800527c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	78db      	ldrb	r3, [r3, #3]
 8005262:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	785b      	ldrb	r3, [r3, #1]
 8005268:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800526a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005270:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	22ca      	movs	r2, #202	; 0xca
 8005282:	625a      	str	r2, [r3, #36]	; 0x24
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2253      	movs	r2, #83	; 0x53
 800528a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 f84c 	bl	800532a <RTC_EnterInitMode>
 8005292:	4603      	mov	r3, r0
 8005294:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005296:	7cfb      	ldrb	r3, [r7, #19]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10c      	bne.n	80052b6 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80052a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80052aa:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 f86f 	bl	8005390 <RTC_ExitInitMode>
 80052b2:	4603      	mov	r3, r0
 80052b4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	22ff      	movs	r2, #255	; 0xff
 80052bc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80052be:	7cfb      	ldrb	r3, [r7, #19]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d103      	bne.n	80052cc <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80052d4:	7cfb      	ldrb	r3, [r7, #19]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	371c      	adds	r7, #28
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd90      	pop	{r4, r7, pc}

080052de <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b084      	sub	sp, #16
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68da      	ldr	r2, [r3, #12]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052f4:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80052f6:	f7fb fecf 	bl	8001098 <HAL_GetTick>
 80052fa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80052fc:	e009      	b.n	8005312 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80052fe:	f7fb fecb 	bl	8001098 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800530c:	d901      	bls.n	8005312 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e007      	b.n	8005322 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f003 0320 	and.w	r3, r3, #32
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0ee      	beq.n	80052fe <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b084      	sub	sp, #16
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005340:	2b00      	cmp	r3, #0
 8005342:	d120      	bne.n	8005386 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f04f 32ff 	mov.w	r2, #4294967295
 800534c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800534e:	f7fb fea3 	bl	8001098 <HAL_GetTick>
 8005352:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005354:	e00d      	b.n	8005372 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005356:	f7fb fe9f 	bl	8001098 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005364:	d905      	bls.n	8005372 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2203      	movs	r2, #3
 800536e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537c:	2b00      	cmp	r3, #0
 800537e:	d102      	bne.n	8005386 <RTC_EnterInitMode+0x5c>
 8005380:	7bfb      	ldrb	r3, [r7, #15]
 8005382:	2b03      	cmp	r3, #3
 8005384:	d1e7      	bne.n	8005356 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005386:	7bfb      	ldrb	r3, [r7, #15]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800539c:	4b1a      	ldr	r3, [pc, #104]	; (8005408 <RTC_ExitInitMode+0x78>)
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	4a19      	ldr	r2, [pc, #100]	; (8005408 <RTC_ExitInitMode+0x78>)
 80053a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053a6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80053a8:	4b17      	ldr	r3, [pc, #92]	; (8005408 <RTC_ExitInitMode+0x78>)
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f003 0320 	and.w	r3, r3, #32
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10c      	bne.n	80053ce <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7ff ff92 	bl	80052de <HAL_RTC_WaitForSynchro>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d01e      	beq.n	80053fe <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2203      	movs	r2, #3
 80053c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	73fb      	strb	r3, [r7, #15]
 80053cc:	e017      	b.n	80053fe <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80053ce:	4b0e      	ldr	r3, [pc, #56]	; (8005408 <RTC_ExitInitMode+0x78>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	4a0d      	ldr	r2, [pc, #52]	; (8005408 <RTC_ExitInitMode+0x78>)
 80053d4:	f023 0320 	bic.w	r3, r3, #32
 80053d8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7ff ff7f 	bl	80052de <HAL_RTC_WaitForSynchro>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d005      	beq.n	80053f2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2203      	movs	r2, #3
 80053ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80053f2:	4b05      	ldr	r3, [pc, #20]	; (8005408 <RTC_ExitInitMode+0x78>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	4a04      	ldr	r2, [pc, #16]	; (8005408 <RTC_ExitInitMode+0x78>)
 80053f8:	f043 0320 	orr.w	r3, r3, #32
 80053fc:	6093      	str	r3, [r2, #8]
  }

  return status;
 80053fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40002800 	.word	0x40002800

0800540c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	4603      	mov	r3, r0
 8005414:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005416:	2300      	movs	r3, #0
 8005418:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800541a:	79fb      	ldrb	r3, [r7, #7]
 800541c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800541e:	e005      	b.n	800542c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3301      	adds	r3, #1
 8005424:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005426:	7afb      	ldrb	r3, [r7, #11]
 8005428:	3b0a      	subs	r3, #10
 800542a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800542c:	7afb      	ldrb	r3, [r7, #11]
 800542e:	2b09      	cmp	r3, #9
 8005430:	d8f6      	bhi.n	8005420 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	b2db      	uxtb	r3, r3
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	b2da      	uxtb	r2, r3
 800543a:	7afb      	ldrb	r3, [r7, #11]
 800543c:	4313      	orrs	r3, r2
 800543e:	b2db      	uxtb	r3, r3
}
 8005440:	4618      	mov	r0, r3
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e049      	b.n	80054f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d106      	bne.n	8005478 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7fb fbce 	bl	8000c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3304      	adds	r3, #4
 8005488:	4619      	mov	r1, r3
 800548a:	4610      	mov	r0, r2
 800548c:	f000 fd58 	bl	8005f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b082      	sub	sp, #8
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e049      	b.n	80055a0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d106      	bne.n	8005526 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7fb fbb1 	bl	8000c88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2202      	movs	r2, #2
 800552a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3304      	adds	r3, #4
 8005536:	4619      	mov	r1, r3
 8005538:	4610      	mov	r0, r2
 800553a:	f000 fd01 	bl	8005f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d109      	bne.n	80055cc <HAL_TIM_PWM_Start+0x24>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	bf14      	ite	ne
 80055c4:	2301      	movne	r3, #1
 80055c6:	2300      	moveq	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	e03c      	b.n	8005646 <HAL_TIM_PWM_Start+0x9e>
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2b04      	cmp	r3, #4
 80055d0:	d109      	bne.n	80055e6 <HAL_TIM_PWM_Start+0x3e>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b01      	cmp	r3, #1
 80055dc:	bf14      	ite	ne
 80055de:	2301      	movne	r3, #1
 80055e0:	2300      	moveq	r3, #0
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	e02f      	b.n	8005646 <HAL_TIM_PWM_Start+0x9e>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	d109      	bne.n	8005600 <HAL_TIM_PWM_Start+0x58>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	bf14      	ite	ne
 80055f8:	2301      	movne	r3, #1
 80055fa:	2300      	moveq	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	e022      	b.n	8005646 <HAL_TIM_PWM_Start+0x9e>
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2b0c      	cmp	r3, #12
 8005604:	d109      	bne.n	800561a <HAL_TIM_PWM_Start+0x72>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b01      	cmp	r3, #1
 8005610:	bf14      	ite	ne
 8005612:	2301      	movne	r3, #1
 8005614:	2300      	moveq	r3, #0
 8005616:	b2db      	uxtb	r3, r3
 8005618:	e015      	b.n	8005646 <HAL_TIM_PWM_Start+0x9e>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b10      	cmp	r3, #16
 800561e:	d109      	bne.n	8005634 <HAL_TIM_PWM_Start+0x8c>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b01      	cmp	r3, #1
 800562a:	bf14      	ite	ne
 800562c:	2301      	movne	r3, #1
 800562e:	2300      	moveq	r3, #0
 8005630:	b2db      	uxtb	r3, r3
 8005632:	e008      	b.n	8005646 <HAL_TIM_PWM_Start+0x9e>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b01      	cmp	r3, #1
 800563e:	bf14      	ite	ne
 8005640:	2301      	movne	r3, #1
 8005642:	2300      	moveq	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e083      	b.n	8005756 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d104      	bne.n	800565e <HAL_TIM_PWM_Start+0xb6>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800565c:	e023      	b.n	80056a6 <HAL_TIM_PWM_Start+0xfe>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b04      	cmp	r3, #4
 8005662:	d104      	bne.n	800566e <HAL_TIM_PWM_Start+0xc6>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800566c:	e01b      	b.n	80056a6 <HAL_TIM_PWM_Start+0xfe>
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b08      	cmp	r3, #8
 8005672:	d104      	bne.n	800567e <HAL_TIM_PWM_Start+0xd6>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800567c:	e013      	b.n	80056a6 <HAL_TIM_PWM_Start+0xfe>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b0c      	cmp	r3, #12
 8005682:	d104      	bne.n	800568e <HAL_TIM_PWM_Start+0xe6>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800568c:	e00b      	b.n	80056a6 <HAL_TIM_PWM_Start+0xfe>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b10      	cmp	r3, #16
 8005692:	d104      	bne.n	800569e <HAL_TIM_PWM_Start+0xf6>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800569c:	e003      	b.n	80056a6 <HAL_TIM_PWM_Start+0xfe>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2202      	movs	r2, #2
 80056a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2201      	movs	r2, #1
 80056ac:	6839      	ldr	r1, [r7, #0]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f001 f854 	bl	800675c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a29      	ldr	r2, [pc, #164]	; (8005760 <HAL_TIM_PWM_Start+0x1b8>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d009      	beq.n	80056d2 <HAL_TIM_PWM_Start+0x12a>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a28      	ldr	r2, [pc, #160]	; (8005764 <HAL_TIM_PWM_Start+0x1bc>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d004      	beq.n	80056d2 <HAL_TIM_PWM_Start+0x12a>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a26      	ldr	r2, [pc, #152]	; (8005768 <HAL_TIM_PWM_Start+0x1c0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d101      	bne.n	80056d6 <HAL_TIM_PWM_Start+0x12e>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e000      	b.n	80056d8 <HAL_TIM_PWM_Start+0x130>
 80056d6:	2300      	movs	r3, #0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d007      	beq.n	80056ec <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a1b      	ldr	r2, [pc, #108]	; (8005760 <HAL_TIM_PWM_Start+0x1b8>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00e      	beq.n	8005714 <HAL_TIM_PWM_Start+0x16c>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fe:	d009      	beq.n	8005714 <HAL_TIM_PWM_Start+0x16c>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a19      	ldr	r2, [pc, #100]	; (800576c <HAL_TIM_PWM_Start+0x1c4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d004      	beq.n	8005714 <HAL_TIM_PWM_Start+0x16c>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a15      	ldr	r2, [pc, #84]	; (8005764 <HAL_TIM_PWM_Start+0x1bc>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d115      	bne.n	8005740 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689a      	ldr	r2, [r3, #8]
 800571a:	4b15      	ldr	r3, [pc, #84]	; (8005770 <HAL_TIM_PWM_Start+0x1c8>)
 800571c:	4013      	ands	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b06      	cmp	r3, #6
 8005724:	d015      	beq.n	8005752 <HAL_TIM_PWM_Start+0x1aa>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800572c:	d011      	beq.n	8005752 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f042 0201 	orr.w	r2, r2, #1
 800573c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800573e:	e008      	b.n	8005752 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0201 	orr.w	r2, r2, #1
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	e000      	b.n	8005754 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005752:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	40012c00 	.word	0x40012c00
 8005764:	40014000 	.word	0x40014000
 8005768:	40014400 	.word	0x40014400
 800576c:	40000400 	.word	0x40000400
 8005770:	00010007 	.word	0x00010007

08005774 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2200      	movs	r2, #0
 8005784:	6839      	ldr	r1, [r7, #0]
 8005786:	4618      	mov	r0, r3
 8005788:	f000 ffe8 	bl	800675c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a39      	ldr	r2, [pc, #228]	; (8005878 <HAL_TIM_PWM_Stop+0x104>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d009      	beq.n	80057aa <HAL_TIM_PWM_Stop+0x36>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a38      	ldr	r2, [pc, #224]	; (800587c <HAL_TIM_PWM_Stop+0x108>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d004      	beq.n	80057aa <HAL_TIM_PWM_Stop+0x36>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a36      	ldr	r2, [pc, #216]	; (8005880 <HAL_TIM_PWM_Stop+0x10c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d101      	bne.n	80057ae <HAL_TIM_PWM_Stop+0x3a>
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <HAL_TIM_PWM_Stop+0x3c>
 80057ae:	2300      	movs	r3, #0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d017      	beq.n	80057e4 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6a1a      	ldr	r2, [r3, #32]
 80057ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80057be:	4013      	ands	r3, r2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10f      	bne.n	80057e4 <HAL_TIM_PWM_Stop+0x70>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6a1a      	ldr	r2, [r3, #32]
 80057ca:	f240 4344 	movw	r3, #1092	; 0x444
 80057ce:	4013      	ands	r3, r2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d107      	bne.n	80057e4 <HAL_TIM_PWM_Stop+0x70>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057e2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6a1a      	ldr	r2, [r3, #32]
 80057ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80057ee:	4013      	ands	r3, r2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10f      	bne.n	8005814 <HAL_TIM_PWM_Stop+0xa0>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6a1a      	ldr	r2, [r3, #32]
 80057fa:	f240 4344 	movw	r3, #1092	; 0x444
 80057fe:	4013      	ands	r3, r2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d107      	bne.n	8005814 <HAL_TIM_PWM_Stop+0xa0>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0201 	bic.w	r2, r2, #1
 8005812:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d104      	bne.n	8005824 <HAL_TIM_PWM_Stop+0xb0>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005822:	e023      	b.n	800586c <HAL_TIM_PWM_Stop+0xf8>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2b04      	cmp	r3, #4
 8005828:	d104      	bne.n	8005834 <HAL_TIM_PWM_Stop+0xc0>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005832:	e01b      	b.n	800586c <HAL_TIM_PWM_Stop+0xf8>
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	2b08      	cmp	r3, #8
 8005838:	d104      	bne.n	8005844 <HAL_TIM_PWM_Stop+0xd0>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005842:	e013      	b.n	800586c <HAL_TIM_PWM_Stop+0xf8>
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	2b0c      	cmp	r3, #12
 8005848:	d104      	bne.n	8005854 <HAL_TIM_PWM_Stop+0xe0>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005852:	e00b      	b.n	800586c <HAL_TIM_PWM_Stop+0xf8>
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2b10      	cmp	r3, #16
 8005858:	d104      	bne.n	8005864 <HAL_TIM_PWM_Stop+0xf0>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005862:	e003      	b.n	800586c <HAL_TIM_PWM_Stop+0xf8>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	40012c00 	.word	0x40012c00
 800587c:	40014000 	.word	0x40014000
 8005880:	40014400 	.word	0x40014400

08005884 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b02      	cmp	r3, #2
 8005898:	d122      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d11b      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0202 	mvn.w	r2, #2
 80058b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 fb1b 	bl	8005f02 <HAL_TIM_IC_CaptureCallback>
 80058cc:	e005      	b.n	80058da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fb0d 	bl	8005eee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 fb1e 	bl	8005f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f003 0304 	and.w	r3, r3, #4
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d122      	bne.n	8005934 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d11b      	bne.n	8005934 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f06f 0204 	mvn.w	r2, #4
 8005904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2202      	movs	r2, #2
 800590a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 faf1 	bl	8005f02 <HAL_TIM_IC_CaptureCallback>
 8005920:	e005      	b.n	800592e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fae3 	bl	8005eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 faf4 	bl	8005f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	f003 0308 	and.w	r3, r3, #8
 800593e:	2b08      	cmp	r3, #8
 8005940:	d122      	bne.n	8005988 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f003 0308 	and.w	r3, r3, #8
 800594c:	2b08      	cmp	r3, #8
 800594e:	d11b      	bne.n	8005988 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f06f 0208 	mvn.w	r2, #8
 8005958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2204      	movs	r2, #4
 800595e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	f003 0303 	and.w	r3, r3, #3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fac7 	bl	8005f02 <HAL_TIM_IC_CaptureCallback>
 8005974:	e005      	b.n	8005982 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fab9 	bl	8005eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 faca 	bl	8005f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	f003 0310 	and.w	r3, r3, #16
 8005992:	2b10      	cmp	r3, #16
 8005994:	d122      	bne.n	80059dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f003 0310 	and.w	r3, r3, #16
 80059a0:	2b10      	cmp	r3, #16
 80059a2:	d11b      	bne.n	80059dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f06f 0210 	mvn.w	r2, #16
 80059ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2208      	movs	r2, #8
 80059b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fa9d 	bl	8005f02 <HAL_TIM_IC_CaptureCallback>
 80059c8:	e005      	b.n	80059d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fa8f 	bl	8005eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 faa0 	bl	8005f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d10e      	bne.n	8005a08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d107      	bne.n	8005a08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f06f 0201 	mvn.w	r2, #1
 8005a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fa69 	bl	8005eda <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a12:	2b80      	cmp	r3, #128	; 0x80
 8005a14:	d10e      	bne.n	8005a34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a20:	2b80      	cmp	r3, #128	; 0x80
 8005a22:	d107      	bne.n	8005a34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 ffaa 	bl	8006988 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a42:	d10e      	bne.n	8005a62 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4e:	2b80      	cmp	r3, #128	; 0x80
 8005a50:	d107      	bne.n	8005a62 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 ff9d 	bl	800699c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6c:	2b40      	cmp	r3, #64	; 0x40
 8005a6e:	d10e      	bne.n	8005a8e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7a:	2b40      	cmp	r3, #64	; 0x40
 8005a7c:	d107      	bne.n	8005a8e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fa4e 	bl	8005f2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	f003 0320 	and.w	r3, r3, #32
 8005a98:	2b20      	cmp	r3, #32
 8005a9a:	d10e      	bne.n	8005aba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f003 0320 	and.w	r3, r3, #32
 8005aa6:	2b20      	cmp	r3, #32
 8005aa8:	d107      	bne.n	8005aba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f06f 0220 	mvn.w	r2, #32
 8005ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 ff5d 	bl	8006974 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005aba:	bf00      	nop
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
	...

08005ac4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d101      	bne.n	8005ade <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005ada:	2302      	movs	r3, #2
 8005adc:	e0fd      	b.n	8005cda <HAL_TIM_PWM_ConfigChannel+0x216>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b14      	cmp	r3, #20
 8005aea:	f200 80f0 	bhi.w	8005cce <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005aee:	a201      	add	r2, pc, #4	; (adr r2, 8005af4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af4:	08005b49 	.word	0x08005b49
 8005af8:	08005ccf 	.word	0x08005ccf
 8005afc:	08005ccf 	.word	0x08005ccf
 8005b00:	08005ccf 	.word	0x08005ccf
 8005b04:	08005b89 	.word	0x08005b89
 8005b08:	08005ccf 	.word	0x08005ccf
 8005b0c:	08005ccf 	.word	0x08005ccf
 8005b10:	08005ccf 	.word	0x08005ccf
 8005b14:	08005bcb 	.word	0x08005bcb
 8005b18:	08005ccf 	.word	0x08005ccf
 8005b1c:	08005ccf 	.word	0x08005ccf
 8005b20:	08005ccf 	.word	0x08005ccf
 8005b24:	08005c0b 	.word	0x08005c0b
 8005b28:	08005ccf 	.word	0x08005ccf
 8005b2c:	08005ccf 	.word	0x08005ccf
 8005b30:	08005ccf 	.word	0x08005ccf
 8005b34:	08005c4d 	.word	0x08005c4d
 8005b38:	08005ccf 	.word	0x08005ccf
 8005b3c:	08005ccf 	.word	0x08005ccf
 8005b40:	08005ccf 	.word	0x08005ccf
 8005b44:	08005c8d 	.word	0x08005c8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68b9      	ldr	r1, [r7, #8]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 fa64 	bl	800601c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699a      	ldr	r2, [r3, #24]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f042 0208 	orr.w	r2, r2, #8
 8005b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	699a      	ldr	r2, [r3, #24]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 0204 	bic.w	r2, r2, #4
 8005b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6999      	ldr	r1, [r3, #24]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	691a      	ldr	r2, [r3, #16]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	619a      	str	r2, [r3, #24]
      break;
 8005b86:	e0a3      	b.n	8005cd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68b9      	ldr	r1, [r7, #8]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 fac0 	bl	8006114 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	699a      	ldr	r2, [r3, #24]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6999      	ldr	r1, [r3, #24]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	021a      	lsls	r2, r3, #8
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	619a      	str	r2, [r3, #24]
      break;
 8005bc8:	e082      	b.n	8005cd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68b9      	ldr	r1, [r7, #8]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 fb19 	bl	8006208 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69da      	ldr	r2, [r3, #28]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f042 0208 	orr.w	r2, r2, #8
 8005be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	69da      	ldr	r2, [r3, #28]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0204 	bic.w	r2, r2, #4
 8005bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	69d9      	ldr	r1, [r3, #28]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	691a      	ldr	r2, [r3, #16]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	61da      	str	r2, [r3, #28]
      break;
 8005c08:	e062      	b.n	8005cd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68b9      	ldr	r1, [r7, #8]
 8005c10:	4618      	mov	r0, r3
 8005c12:	f000 fb71 	bl	80062f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69da      	ldr	r2, [r3, #28]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69da      	ldr	r2, [r3, #28]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	69d9      	ldr	r1, [r3, #28]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	021a      	lsls	r2, r3, #8
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	430a      	orrs	r2, r1
 8005c48:	61da      	str	r2, [r3, #28]
      break;
 8005c4a:	e041      	b.n	8005cd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68b9      	ldr	r1, [r7, #8]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 fbae 	bl	80063b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0208 	orr.w	r2, r2, #8
 8005c66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0204 	bic.w	r2, r2, #4
 8005c76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	691a      	ldr	r2, [r3, #16]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c8a:	e021      	b.n	8005cd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68b9      	ldr	r1, [r7, #8]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 fbe6 	bl	8006464 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ca6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	021a      	lsls	r2, r3, #8
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ccc:	e000      	b.n	8005cd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005cce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop

08005ce4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_TIM_ConfigClockSource+0x18>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e0a8      	b.n	8005e4e <HAL_TIM_ConfigClockSource+0x16a>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b40      	cmp	r3, #64	; 0x40
 8005d36:	d067      	beq.n	8005e08 <HAL_TIM_ConfigClockSource+0x124>
 8005d38:	2b40      	cmp	r3, #64	; 0x40
 8005d3a:	d80b      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x70>
 8005d3c:	2b10      	cmp	r3, #16
 8005d3e:	d073      	beq.n	8005e28 <HAL_TIM_ConfigClockSource+0x144>
 8005d40:	2b10      	cmp	r3, #16
 8005d42:	d802      	bhi.n	8005d4a <HAL_TIM_ConfigClockSource+0x66>
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d06f      	beq.n	8005e28 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005d48:	e078      	b.n	8005e3c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005d4a:	2b20      	cmp	r3, #32
 8005d4c:	d06c      	beq.n	8005e28 <HAL_TIM_ConfigClockSource+0x144>
 8005d4e:	2b30      	cmp	r3, #48	; 0x30
 8005d50:	d06a      	beq.n	8005e28 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005d52:	e073      	b.n	8005e3c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005d54:	2b70      	cmp	r3, #112	; 0x70
 8005d56:	d00d      	beq.n	8005d74 <HAL_TIM_ConfigClockSource+0x90>
 8005d58:	2b70      	cmp	r3, #112	; 0x70
 8005d5a:	d804      	bhi.n	8005d66 <HAL_TIM_ConfigClockSource+0x82>
 8005d5c:	2b50      	cmp	r3, #80	; 0x50
 8005d5e:	d033      	beq.n	8005dc8 <HAL_TIM_ConfigClockSource+0xe4>
 8005d60:	2b60      	cmp	r3, #96	; 0x60
 8005d62:	d041      	beq.n	8005de8 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005d64:	e06a      	b.n	8005e3c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d6a:	d066      	beq.n	8005e3a <HAL_TIM_ConfigClockSource+0x156>
 8005d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d70:	d017      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8005d72:	e063      	b.n	8005e3c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6818      	ldr	r0, [r3, #0]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	6899      	ldr	r1, [r3, #8]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f000 fcca 	bl	800671c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d96:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	609a      	str	r2, [r3, #8]
      break;
 8005da0:	e04c      	b.n	8005e3c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6818      	ldr	r0, [r3, #0]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	6899      	ldr	r1, [r3, #8]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	f000 fcb3 	bl	800671c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dc4:	609a      	str	r2, [r3, #8]
      break;
 8005dc6:	e039      	b.n	8005e3c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6818      	ldr	r0, [r3, #0]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	6859      	ldr	r1, [r3, #4]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	f000 fc27 	bl	8006628 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2150      	movs	r1, #80	; 0x50
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 fc80 	bl	80066e6 <TIM_ITRx_SetConfig>
      break;
 8005de6:	e029      	b.n	8005e3c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6818      	ldr	r0, [r3, #0]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	6859      	ldr	r1, [r3, #4]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	461a      	mov	r2, r3
 8005df6:	f000 fc46 	bl	8006686 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2160      	movs	r1, #96	; 0x60
 8005e00:	4618      	mov	r0, r3
 8005e02:	f000 fc70 	bl	80066e6 <TIM_ITRx_SetConfig>
      break;
 8005e06:	e019      	b.n	8005e3c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6818      	ldr	r0, [r3, #0]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	6859      	ldr	r1, [r3, #4]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	461a      	mov	r2, r3
 8005e16:	f000 fc07 	bl	8006628 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2140      	movs	r1, #64	; 0x40
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 fc60 	bl	80066e6 <TIM_ITRx_SetConfig>
      break;
 8005e26:	e009      	b.n	8005e3c <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4619      	mov	r1, r3
 8005e32:	4610      	mov	r0, r2
 8005e34:	f000 fc57 	bl	80066e6 <TIM_ITRx_SetConfig>
        break;
 8005e38:	e000      	b.n	8005e3c <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005e3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b082      	sub	sp, #8
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d101      	bne.n	8005e6e <HAL_TIM_SlaveConfigSynchro+0x18>
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	e031      	b.n	8005ed2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2202      	movs	r2, #2
 8005e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fb49 	bl	8006518 <TIM_SlaveTimer_SetConfig>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d009      	beq.n	8005ea0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e018      	b.n	8005ed2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eae:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68da      	ldr	r2, [r3, #12]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ebe:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b083      	sub	sp, #12
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005ee2:	bf00      	nop
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
	...

08005f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a2e      	ldr	r2, [pc, #184]	; (800600c <TIM_Base_SetConfig+0xcc>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d007      	beq.n	8005f68 <TIM_Base_SetConfig+0x28>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f5e:	d003      	beq.n	8005f68 <TIM_Base_SetConfig+0x28>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a2b      	ldr	r2, [pc, #172]	; (8006010 <TIM_Base_SetConfig+0xd0>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d108      	bne.n	8005f7a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a23      	ldr	r2, [pc, #140]	; (800600c <TIM_Base_SetConfig+0xcc>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d00f      	beq.n	8005fa2 <TIM_Base_SetConfig+0x62>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f88:	d00b      	beq.n	8005fa2 <TIM_Base_SetConfig+0x62>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a20      	ldr	r2, [pc, #128]	; (8006010 <TIM_Base_SetConfig+0xd0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d007      	beq.n	8005fa2 <TIM_Base_SetConfig+0x62>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a1f      	ldr	r2, [pc, #124]	; (8006014 <TIM_Base_SetConfig+0xd4>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d003      	beq.n	8005fa2 <TIM_Base_SetConfig+0x62>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a1e      	ldr	r2, [pc, #120]	; (8006018 <TIM_Base_SetConfig+0xd8>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d108      	bne.n	8005fb4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a0c      	ldr	r2, [pc, #48]	; (800600c <TIM_Base_SetConfig+0xcc>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d007      	beq.n	8005ff0 <TIM_Base_SetConfig+0xb0>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a0c      	ldr	r2, [pc, #48]	; (8006014 <TIM_Base_SetConfig+0xd4>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d003      	beq.n	8005ff0 <TIM_Base_SetConfig+0xb0>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a0b      	ldr	r2, [pc, #44]	; (8006018 <TIM_Base_SetConfig+0xd8>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d103      	bne.n	8005ff8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	691a      	ldr	r2, [r3, #16]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	615a      	str	r2, [r3, #20]
}
 8005ffe:	bf00      	nop
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	40012c00 	.word	0x40012c00
 8006010:	40000400 	.word	0x40000400
 8006014:	40014000 	.word	0x40014000
 8006018:	40014400 	.word	0x40014400

0800601c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f023 0201 	bic.w	r2, r3, #1
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800604a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 0303 	bic.w	r3, r3, #3
 8006056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	4313      	orrs	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f023 0302 	bic.w	r3, r3, #2
 8006068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	4313      	orrs	r3, r2
 8006072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a24      	ldr	r2, [pc, #144]	; (8006108 <TIM_OC1_SetConfig+0xec>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d007      	beq.n	800608c <TIM_OC1_SetConfig+0x70>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a23      	ldr	r2, [pc, #140]	; (800610c <TIM_OC1_SetConfig+0xf0>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d003      	beq.n	800608c <TIM_OC1_SetConfig+0x70>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a22      	ldr	r2, [pc, #136]	; (8006110 <TIM_OC1_SetConfig+0xf4>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d10c      	bne.n	80060a6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f023 0308 	bic.w	r3, r3, #8
 8006092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	4313      	orrs	r3, r2
 800609c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f023 0304 	bic.w	r3, r3, #4
 80060a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a17      	ldr	r2, [pc, #92]	; (8006108 <TIM_OC1_SetConfig+0xec>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d007      	beq.n	80060be <TIM_OC1_SetConfig+0xa2>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a16      	ldr	r2, [pc, #88]	; (800610c <TIM_OC1_SetConfig+0xf0>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d003      	beq.n	80060be <TIM_OC1_SetConfig+0xa2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a15      	ldr	r2, [pc, #84]	; (8006110 <TIM_OC1_SetConfig+0xf4>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d111      	bne.n	80060e2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	4313      	orrs	r3, r2
 80060e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	621a      	str	r2, [r3, #32]
}
 80060fc:	bf00      	nop
 80060fe:	371c      	adds	r7, #28
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	40012c00 	.word	0x40012c00
 800610c:	40014000 	.word	0x40014000
 8006110:	40014400 	.word	0x40014400

08006114 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	f023 0210 	bic.w	r2, r3, #16
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800614e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	021b      	lsls	r3, r3, #8
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	4313      	orrs	r3, r2
 800615a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f023 0320 	bic.w	r3, r3, #32
 8006162:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	011b      	lsls	r3, r3, #4
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	4313      	orrs	r3, r2
 800616e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a22      	ldr	r2, [pc, #136]	; (80061fc <TIM_OC2_SetConfig+0xe8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d10d      	bne.n	8006194 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800617e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	011b      	lsls	r3, r3, #4
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	4313      	orrs	r3, r2
 800618a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006192:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a19      	ldr	r2, [pc, #100]	; (80061fc <TIM_OC2_SetConfig+0xe8>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d007      	beq.n	80061ac <TIM_OC2_SetConfig+0x98>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a18      	ldr	r2, [pc, #96]	; (8006200 <TIM_OC2_SetConfig+0xec>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d003      	beq.n	80061ac <TIM_OC2_SetConfig+0x98>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a17      	ldr	r2, [pc, #92]	; (8006204 <TIM_OC2_SetConfig+0xf0>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d113      	bne.n	80061d4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	621a      	str	r2, [r3, #32]
}
 80061ee:	bf00      	nop
 80061f0:	371c      	adds	r7, #28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	40012c00 	.word	0x40012c00
 8006200:	40014000 	.word	0x40014000
 8006204:	40014400 	.word	0x40014400

08006208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f023 0303 	bic.w	r3, r3, #3
 8006242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	4313      	orrs	r3, r2
 800624c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	021b      	lsls	r3, r3, #8
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	4313      	orrs	r3, r2
 8006260:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a21      	ldr	r2, [pc, #132]	; (80062ec <TIM_OC3_SetConfig+0xe4>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d10d      	bne.n	8006286 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006270:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	021b      	lsls	r3, r3, #8
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	4313      	orrs	r3, r2
 800627c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a18      	ldr	r2, [pc, #96]	; (80062ec <TIM_OC3_SetConfig+0xe4>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d007      	beq.n	800629e <TIM_OC3_SetConfig+0x96>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a17      	ldr	r2, [pc, #92]	; (80062f0 <TIM_OC3_SetConfig+0xe8>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d003      	beq.n	800629e <TIM_OC3_SetConfig+0x96>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a16      	ldr	r2, [pc, #88]	; (80062f4 <TIM_OC3_SetConfig+0xec>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d113      	bne.n	80062c6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	011b      	lsls	r3, r3, #4
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	621a      	str	r2, [r3, #32]
}
 80062e0:	bf00      	nop
 80062e2:	371c      	adds	r7, #28
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	40012c00 	.word	0x40012c00
 80062f0:	40014000 	.word	0x40014000
 80062f4:	40014400 	.word	0x40014400

080062f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800632a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	021b      	lsls	r3, r3, #8
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006346:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	031b      	lsls	r3, r3, #12
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a14      	ldr	r2, [pc, #80]	; (80063a8 <TIM_OC4_SetConfig+0xb0>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d007      	beq.n	800636c <TIM_OC4_SetConfig+0x74>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a13      	ldr	r2, [pc, #76]	; (80063ac <TIM_OC4_SetConfig+0xb4>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d003      	beq.n	800636c <TIM_OC4_SetConfig+0x74>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a12      	ldr	r2, [pc, #72]	; (80063b0 <TIM_OC4_SetConfig+0xb8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d109      	bne.n	8006380 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006372:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	019b      	lsls	r3, r3, #6
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	4313      	orrs	r3, r2
 800637e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	621a      	str	r2, [r3, #32]
}
 800639a:	bf00      	nop
 800639c:	371c      	adds	r7, #28
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	40012c00 	.word	0x40012c00
 80063ac:	40014000 	.word	0x40014000
 80063b0:	40014400 	.word	0x40014400

080063b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80063f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	041b      	lsls	r3, r3, #16
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	4313      	orrs	r3, r2
 8006404:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a13      	ldr	r2, [pc, #76]	; (8006458 <TIM_OC5_SetConfig+0xa4>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d007      	beq.n	800641e <TIM_OC5_SetConfig+0x6a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a12      	ldr	r2, [pc, #72]	; (800645c <TIM_OC5_SetConfig+0xa8>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d003      	beq.n	800641e <TIM_OC5_SetConfig+0x6a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a11      	ldr	r2, [pc, #68]	; (8006460 <TIM_OC5_SetConfig+0xac>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d109      	bne.n	8006432 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006424:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	021b      	lsls	r3, r3, #8
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	4313      	orrs	r3, r2
 8006430:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	621a      	str	r2, [r3, #32]
}
 800644c:	bf00      	nop
 800644e:	371c      	adds	r7, #28
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	40012c00 	.word	0x40012c00
 800645c:	40014000 	.word	0x40014000
 8006460:	40014400 	.word	0x40014400

08006464 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006464:	b480      	push	{r7}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	021b      	lsls	r3, r3, #8
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	051b      	lsls	r3, r3, #20
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a14      	ldr	r2, [pc, #80]	; (800650c <TIM_OC6_SetConfig+0xa8>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d007      	beq.n	80064d0 <TIM_OC6_SetConfig+0x6c>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a13      	ldr	r2, [pc, #76]	; (8006510 <TIM_OC6_SetConfig+0xac>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d003      	beq.n	80064d0 <TIM_OC6_SetConfig+0x6c>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a12      	ldr	r2, [pc, #72]	; (8006514 <TIM_OC6_SetConfig+0xb0>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d109      	bne.n	80064e4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	029b      	lsls	r3, r3, #10
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	621a      	str	r2, [r3, #32]
}
 80064fe:	bf00      	nop
 8006500:	371c      	adds	r7, #28
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	40012c00 	.word	0x40012c00
 8006510:	40014000 	.word	0x40014000
 8006514:	40014400 	.word	0x40014400

08006518 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006530:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	4313      	orrs	r3, r2
 800653a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006542:	f023 0307 	bic.w	r3, r3, #7
 8006546:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	4313      	orrs	r3, r2
 8006550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	2b30      	cmp	r3, #48	; 0x30
 8006560:	d05c      	beq.n	800661c <TIM_SlaveTimer_SetConfig+0x104>
 8006562:	2b30      	cmp	r3, #48	; 0x30
 8006564:	d806      	bhi.n	8006574 <TIM_SlaveTimer_SetConfig+0x5c>
 8006566:	2b10      	cmp	r3, #16
 8006568:	d058      	beq.n	800661c <TIM_SlaveTimer_SetConfig+0x104>
 800656a:	2b20      	cmp	r3, #32
 800656c:	d056      	beq.n	800661c <TIM_SlaveTimer_SetConfig+0x104>
 800656e:	2b00      	cmp	r3, #0
 8006570:	d054      	beq.n	800661c <TIM_SlaveTimer_SetConfig+0x104>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8006572:	e054      	b.n	800661e <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8006574:	2b50      	cmp	r3, #80	; 0x50
 8006576:	d03d      	beq.n	80065f4 <TIM_SlaveTimer_SetConfig+0xdc>
 8006578:	2b50      	cmp	r3, #80	; 0x50
 800657a:	d802      	bhi.n	8006582 <TIM_SlaveTimer_SetConfig+0x6a>
 800657c:	2b40      	cmp	r3, #64	; 0x40
 800657e:	d010      	beq.n	80065a2 <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 8006580:	e04d      	b.n	800661e <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8006582:	2b60      	cmp	r3, #96	; 0x60
 8006584:	d040      	beq.n	8006608 <TIM_SlaveTimer_SetConfig+0xf0>
 8006586:	2b70      	cmp	r3, #112	; 0x70
 8006588:	d000      	beq.n	800658c <TIM_SlaveTimer_SetConfig+0x74>
      break;
 800658a:	e048      	b.n	800661e <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6818      	ldr	r0, [r3, #0]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	68d9      	ldr	r1, [r3, #12]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	689a      	ldr	r2, [r3, #8]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	f000 f8be 	bl	800671c <TIM_ETR_SetConfig>
      break;
 80065a0:	e03d      	b.n	800661e <TIM_SlaveTimer_SetConfig+0x106>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2b05      	cmp	r3, #5
 80065a8:	d101      	bne.n	80065ae <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e038      	b.n	8006620 <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6a1a      	ldr	r2, [r3, #32]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f022 0201 	bic.w	r2, r2, #1
 80065c4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065d4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	011b      	lsls	r3, r3, #4
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	4313      	orrs	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	621a      	str	r2, [r3, #32]
      break;
 80065f2:	e014      	b.n	800661e <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6818      	ldr	r0, [r3, #0]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	6899      	ldr	r1, [r3, #8]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	461a      	mov	r2, r3
 8006602:	f000 f811 	bl	8006628 <TIM_TI1_ConfigInputStage>
      break;
 8006606:	e00a      	b.n	800661e <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6818      	ldr	r0, [r3, #0]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	6899      	ldr	r1, [r3, #8]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	461a      	mov	r2, r3
 8006616:	f000 f836 	bl	8006686 <TIM_TI2_ConfigInputStage>
      break;
 800661a:	e000      	b.n	800661e <TIM_SlaveTimer_SetConfig+0x106>
        break;
 800661c:	bf00      	nop
  }
  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3718      	adds	r7, #24
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	f023 0201 	bic.w	r2, r3, #1
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	011b      	lsls	r3, r3, #4
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	4313      	orrs	r3, r2
 800665c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f023 030a 	bic.w	r3, r3, #10
 8006664:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	4313      	orrs	r3, r2
 800666c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	621a      	str	r2, [r3, #32]
}
 800667a:	bf00      	nop
 800667c:	371c      	adds	r7, #28
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006686:	b480      	push	{r7}
 8006688:	b087      	sub	sp, #28
 800668a:	af00      	add	r7, sp, #0
 800668c:	60f8      	str	r0, [r7, #12]
 800668e:	60b9      	str	r1, [r7, #8]
 8006690:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	f023 0210 	bic.w	r2, r3, #16
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	031b      	lsls	r3, r3, #12
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	621a      	str	r2, [r3, #32]
}
 80066da:	bf00      	nop
 80066dc:	371c      	adds	r7, #28
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b085      	sub	sp, #20
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
 80066ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4313      	orrs	r3, r2
 8006704:	f043 0307 	orr.w	r3, r3, #7
 8006708:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	609a      	str	r2, [r3, #8]
}
 8006710:	bf00      	nop
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
 8006728:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006736:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	021a      	lsls	r2, r3, #8
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	431a      	orrs	r2, r3
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	4313      	orrs	r3, r2
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	4313      	orrs	r3, r2
 8006748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	609a      	str	r2, [r3, #8]
}
 8006750:	bf00      	nop
 8006752:	371c      	adds	r7, #28
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800675c:	b480      	push	{r7}
 800675e:	b087      	sub	sp, #28
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f003 031f 	and.w	r3, r3, #31
 800676e:	2201      	movs	r2, #1
 8006770:	fa02 f303 	lsl.w	r3, r2, r3
 8006774:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6a1a      	ldr	r2, [r3, #32]
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	43db      	mvns	r3, r3
 800677e:	401a      	ands	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6a1a      	ldr	r2, [r3, #32]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f003 031f 	and.w	r3, r3, #31
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	fa01 f303 	lsl.w	r3, r1, r3
 8006794:	431a      	orrs	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	621a      	str	r2, [r3, #32]
}
 800679a:	bf00      	nop
 800679c:	371c      	adds	r7, #28
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
	...

080067a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d101      	bne.n	80067c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067bc:	2302      	movs	r3, #2
 80067be:	e054      	b.n	800686a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2202      	movs	r2, #2
 80067cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a24      	ldr	r2, [pc, #144]	; (8006878 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d108      	bne.n	80067fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006802:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	4313      	orrs	r3, r2
 800680c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a17      	ldr	r2, [pc, #92]	; (8006878 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d00e      	beq.n	800683e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006828:	d009      	beq.n	800683e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a13      	ldr	r2, [pc, #76]	; (800687c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d004      	beq.n	800683e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a11      	ldr	r2, [pc, #68]	; (8006880 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d10c      	bne.n	8006858 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006844:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	4313      	orrs	r3, r2
 800684e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	40012c00 	.word	0x40012c00
 800687c:	40000400 	.word	0x40000400
 8006880:	40014000 	.word	0x40014000

08006884 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006898:	2b01      	cmp	r3, #1
 800689a:	d101      	bne.n	80068a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800689c:	2302      	movs	r3, #2
 800689e:	e060      	b.n	8006962 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4313      	orrs	r3, r2
 80068de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006906:	4313      	orrs	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	041b      	lsls	r3, r3, #16
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a14      	ldr	r2, [pc, #80]	; (8006970 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d115      	bne.n	8006950 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692e:	051b      	lsls	r3, r3, #20
 8006930:	4313      	orrs	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	4313      	orrs	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	6a1b      	ldr	r3, [r3, #32]
 800694c:	4313      	orrs	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	40012c00 	.word	0x40012c00

08006974 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <__libc_init_array>:
 80069b0:	b570      	push	{r4, r5, r6, lr}
 80069b2:	4e0d      	ldr	r6, [pc, #52]	; (80069e8 <__libc_init_array+0x38>)
 80069b4:	4c0d      	ldr	r4, [pc, #52]	; (80069ec <__libc_init_array+0x3c>)
 80069b6:	1ba4      	subs	r4, r4, r6
 80069b8:	10a4      	asrs	r4, r4, #2
 80069ba:	2500      	movs	r5, #0
 80069bc:	42a5      	cmp	r5, r4
 80069be:	d109      	bne.n	80069d4 <__libc_init_array+0x24>
 80069c0:	4e0b      	ldr	r6, [pc, #44]	; (80069f0 <__libc_init_array+0x40>)
 80069c2:	4c0c      	ldr	r4, [pc, #48]	; (80069f4 <__libc_init_array+0x44>)
 80069c4:	f000 f820 	bl	8006a08 <_init>
 80069c8:	1ba4      	subs	r4, r4, r6
 80069ca:	10a4      	asrs	r4, r4, #2
 80069cc:	2500      	movs	r5, #0
 80069ce:	42a5      	cmp	r5, r4
 80069d0:	d105      	bne.n	80069de <__libc_init_array+0x2e>
 80069d2:	bd70      	pop	{r4, r5, r6, pc}
 80069d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069d8:	4798      	blx	r3
 80069da:	3501      	adds	r5, #1
 80069dc:	e7ee      	b.n	80069bc <__libc_init_array+0xc>
 80069de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069e2:	4798      	blx	r3
 80069e4:	3501      	adds	r5, #1
 80069e6:	e7f2      	b.n	80069ce <__libc_init_array+0x1e>
 80069e8:	08006a68 	.word	0x08006a68
 80069ec:	08006a68 	.word	0x08006a68
 80069f0:	08006a68 	.word	0x08006a68
 80069f4:	08006a6c 	.word	0x08006a6c

080069f8 <memset>:
 80069f8:	4402      	add	r2, r0
 80069fa:	4603      	mov	r3, r0
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d100      	bne.n	8006a02 <memset+0xa>
 8006a00:	4770      	bx	lr
 8006a02:	f803 1b01 	strb.w	r1, [r3], #1
 8006a06:	e7f9      	b.n	80069fc <memset+0x4>

08006a08 <_init>:
 8006a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0a:	bf00      	nop
 8006a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a0e:	bc08      	pop	{r3}
 8006a10:	469e      	mov	lr, r3
 8006a12:	4770      	bx	lr

08006a14 <_fini>:
 8006a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a16:	bf00      	nop
 8006a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a1a:	bc08      	pop	{r3}
 8006a1c:	469e      	mov	lr, r3
 8006a1e:	4770      	bx	lr
